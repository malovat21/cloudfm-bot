import asyncio
import logging
import sqlite3
import csv
import re
from typing import Dict, List
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
    CallbackContext,
    CallbackQueryHandler,
    PersistenceInput,
    PicklePersistence
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å –≤–∞—à–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
TOKEN = "8013532862:AAGG6ywOEfm7s6XgFJPBevxjIjmW_cZ8wZE"
ADMIN_IDS = [711876728, 789800147, 7664673453]
ADMIN_USERNAME = "@malovat21"

# ---- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å CSV ----

def clean_string(text: str) -> str:
    """–û—á–∏—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –ø—Ä–æ–±–µ–ª—ã"""
    if not text:
        return ""
    # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –Ω–µ–ø–µ—á–∞—Ç–∞–µ–º—ã–µ —Å–∏–º–≤–æ–ª—ã
    text = re.sub(r'\s+', ' ', text.strip())
    return text

def normalize_category(category: str) -> str:
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    category = clean_string(category)
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ–ø–µ—á–∞—Ç–∫–∏ –∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–ø–∏—Å–∞–Ω–∏—è
    category_mapping = {
        '—Ñ–æ–¥–Ω–æ—Ä–∞–∑–∫–∏': '–û–¥–Ω–æ—Ä–∞–∑–∫–∏',
        '–æ–¥–Ω–æ—Ä–∞–∑–∫–∏': '–û–¥–Ω–æ—Ä–∞–∑–∫–∏',
        '–∂–∏–¥–∫–æ—Å—Ç–∏': '–ñ–∏–¥–∫–æ—Å—Ç–∏',
        '–∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏–µ –¥–ª—è –ø–æ–¥ —Å–∏—Å—Ç–µ–º': '–ö–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏–µ',
        '–∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏–µ': '–ö–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏–µ'
    }
    
    lower_category = category.lower()
    return category_mapping.get(lower_category, category)

def load_products_from_csv() -> List[Dict]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–∑ CSV —Ñ–∞–π–ª–∞"""
    products = []
    try:
        with open('products.csv', 'r', encoding='utf-8') as file:
            reader = csv.DictReader(file)
            for row_num, row in enumerate(reader, 1):
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                if not any(row.values()):
                    continue
                
                # –û—á–∏—â–∞–µ–º –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ
                cleaned_row = {}
                for key, value in row.items():
                    cleaned_key = clean_string(key)
                    cleaned_value = clean_string(value)
                    cleaned_row[cleaned_key] = cleaned_value
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
                if 'price' not in cleaned_row or not cleaned_row['price']:
                    logging.warning(f"–ü—Ä–æ–ø—É—â–µ–Ω –ø—Ä–æ–¥—É–∫—Ç –±–µ–∑ —Ü–µ–Ω—ã –≤ —Å—Ç—Ä–æ–∫–µ {row_num}: {cleaned_row}")
                    continue
                
                # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
                if 'category' in cleaned_row:
                    cleaned_row['category'] = normalize_category(cleaned_row['category'])
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—É –≤ —á–∏—Å–ª–æ –∏ —Ñ–ª–∞–≥ –≤ –±—É–ª–µ–≤–æ –∑–Ω–∞—á–µ–Ω–∏–µ
                try:
                    cleaned_row['price'] = int(cleaned_row['price'])
                    cleaned_row['has_flavors'] = cleaned_row.get('has_flavors', 'false').lower() == 'true'
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª–µ–π
                    cleaned_row['category'] = cleaned_row.get('category', '')
                    cleaned_row['brand'] = cleaned_row.get('brand', '')
                    cleaned_row['subcategory'] = cleaned_row.get('subcategory', '')
                    cleaned_row['product_id'] = cleaned_row.get('product_id', '')
                    cleaned_row['image_url'] = cleaned_row.get('image_url', '')
                    cleaned_row['name'] = cleaned_row.get('name', '')
                    
                    products.append(cleaned_row)
                except (ValueError, KeyError) as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏ {row_num} {cleaned_row}: {e}")
                    continue
                    
        logging.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(products)} —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ CSV")
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        category_stats = {}
        for product in products:
            category = product.get('category', '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')
            category_stats[category] = category_stats.get(category, 0) + 1
        
        for category, count in category_stats.items():
            logging.info(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category}': {count} —Ç–æ–≤–∞—Ä–æ–≤")
            
    except FileNotFoundError:
        logging.error("–§–∞–π–ª products.csv –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ products.csv: {e}")
    return products

def load_flavors_from_csv() -> Dict[str, List[str]]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤–∫—É—Å—ã –∏–∑ CSV —Ñ–∞–π–ª–∞ –∏ –≥—Ä—É–ø–ø–∏—Ä—É–µ—Ç –ø–æ product_id"""
    flavors_dict = {}
    try:
        with open('flavors.csv', 'r', encoding='utf-8') as file:
            reader = csv.DictReader(file)
            for row in reader:
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                if not any(row.values()):
                    continue
                    
                product_id = clean_string(row.get('product_id', ''))
                flavor_name = clean_string(row.get('flavor_name', ''))
                
                if product_id and flavor_name:
                    if product_id not in flavors_dict:
                        flavors_dict[product_id] = []
                    flavors_dict[product_id].append(flavor_name)
                    
        logging.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –≤–∫—É—Å–æ–≤ –¥–ª—è {len(flavors_dict)} —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ CSV")
    except FileNotFoundError:
        logging.error("–§–∞–π–ª flavors.csv –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ flavors.csv: {e}")
    return flavors_dict

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
PRODUCTS_DATA = load_products_from_csv()
FLAVORS_DATA = load_flavors_from_csv()

# ---- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö ----

def init_database():
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            username TEXT,
            first_name TEXT,
            last_name TEXT,
            is_active INTEGER DEFAULT 1,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    conn.commit()
    conn.close()

def add_user(user_id, username, first_name, last_name):
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute('''
        INSERT OR REPLACE INTO users (user_id, username, first_name, last_name, is_active)
        VALUES (?, ?, ?, ?, 1)
    ''', (user_id, username, first_name, last_name))
    conn.commit()
    conn.close()

def get_all_users():
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute('SELECT user_id FROM users WHERE is_active = 1')
    users = [row[0] for row in cursor.fetchall()]
    conn.close()
    return users

def deactivate_user(user_id):
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute('UPDATE users SET is_active = 0 WHERE user_id = ?', (user_id,))
    conn.commit()
    conn.close()

# ---- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è ----

class Utf8FileHandler(logging.FileHandler):
    def __init__(self, filename, mode='a', encoding='utf-8', delay=False):
        super().__init__(filename, mode, encoding, delay)

logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)

file_handler = Utf8FileHandler("bot.log")
file_handler.setFormatter(logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s'))

console_handler = logging.StreamHandler()
console_handler.setFormatter(logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s'))

logger.addHandler(file_handler)
logger.addHandler(console_handler)

# ---- –°–æ—Å—Ç–æ—è–Ω–∏—è –∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ----

USER_STATES = {}
USER_CARTS = {}
USER_CURRENT_PRODUCT = {}
USER_CURRENT_FLAVORS = {}

# ---- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ----

def main_menu_keyboard():
    return ReplyKeyboardMarkup([
        ["üõí –ö–∞—Ç–∞–ª–æ–≥", "üõçÔ∏è –ö–æ—Ä–∑–∏–Ω–∞"],
        ["üöö –î–æ—Å—Ç–∞–≤–∫–∞", "‚ùì –ü–æ–º–æ—â—å"],
        ["üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã"]
    ], resize_keyboard=True)

def catalog_menu_keyboard():
    return ReplyKeyboardMarkup([
        ["üíß –ñ–∏–¥–∫–æ—Å—Ç–∏", "üö¨ –û–¥–Ω–æ—Ä–∞–∑–∫–∏"],
        ["üåø –ñ–µ–≤–∞—Ç–µ–ª—å–Ω—ã–π —Ç–∞–±–∞–∫", "üîß –ü–æ–¥-—Å–∏—Å—Ç–µ–º—ã"],
        ["‚öôÔ∏è –ö–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏–µ –¥–ª—è –ø–æ–¥-—Å–∏—Å—Ç–µ–º"],
        ["üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
    ], resize_keyboard=True)

def liquids_brands_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –±—Ä–µ–Ω–¥–æ–≤ –∂–∏–¥–∫–æ—Å—Ç–µ–π"""
    brands = set()
    for product in PRODUCTS_DATA:
        category = product.get('category', '')
        if category == '–ñ–∏–¥–∫–æ—Å—Ç–∏':
            brand = product.get('brand', '')
            if brand:
                brands.add(brand)
    
    if not brands:
        return ReplyKeyboardMarkup([
            ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∫–∞—Ç–∞–ª–æ–≥", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
        ], resize_keyboard=True)
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –±—Ä–µ–Ω–¥—ã –∏ —Å–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    sorted_brands = sorted(brands)
    keyboard = []
    row = []
    
    for i, brand in enumerate(sorted_brands):
        row.append(brand)
        if len(row) == 3 or i == len(sorted_brands) - 1:
            keyboard.append(row)
            row = []
    
    keyboard.append(["‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∫–∞—Ç–∞–ª–æ–≥", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"])
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def disposable_brands_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –±—Ä–µ–Ω–¥–æ–≤ –æ–¥–Ω–æ—Ä–∞–∑–æ–∫"""
    brands = set()
    for product in PRODUCTS_DATA:
        category = product.get('category', '')
        if category == '–û–¥–Ω–æ—Ä–∞–∑–∫–∏':
            brand = product.get('brand', '')
            if brand:
                brands.add(brand)
    
    if not brands:
        return ReplyKeyboardMarkup([
            ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∫–∞—Ç–∞–ª–æ–≥", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
        ], resize_keyboard=True)
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –±—Ä–µ–Ω–¥—ã –∏ —Å–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    sorted_brands = sorted(brands)
    keyboard = []
    row = []
    
    for i, brand in enumerate(sorted_brands):
        row.append(brand)
        if len(row) == 3 or i == len(sorted_brands) - 1:
            keyboard.append(row)
            row = []
    
    keyboard.append(["‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∫–∞—Ç–∞–ª–æ–≥", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"])
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def get_products_keyboard(category, brand):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±—Ä–µ–Ω–¥–∞"""
    products = []
    for product in PRODUCTS_DATA:
        product_category = product.get('category', '')
        product_brand = product.get('brand', '')
        if product_category == category and product_brand == brand:
            product_name = product.get('name', '')
            if product_name:
                products.append(product_name)
    
    keyboard = []
    row = []
    
    # –ú–∞–∫—Å–∏–º—É–º 2 —Ç–æ–≤–∞—Ä–∞ –≤ —Ä—è–¥—É
    for i, product in enumerate(products):
        row.append(product)
        if len(row) == 2 or i == len(products) - 1:
            keyboard.append(row)
            row = []
    
    if not keyboard:
        keyboard.append(["–¢–æ–≤–∞—Ä—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç"])
    
    back_text = "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∂–∏–¥–∫–æ—Å—Ç—è–º" if category == "–ñ–∏–¥–∫–æ—Å—Ç–∏" else "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –æ–¥–Ω–æ—Ä–∞–∑–∫–∞–º"
    keyboard.append([back_text, "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"])
    
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def get_accessories_categories_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏—Ö"""
    categories = set()
    for product in PRODUCTS_DATA:
        category = product.get('category', '')
        if category == '–ö–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏–µ':
            subcategory = product.get('subcategory', '')
            if subcategory:
                categories.add(subcategory)
    
    if not categories:
        return ReplyKeyboardMarkup([
            ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∫–∞—Ç–∞–ª–æ–≥", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
        ], resize_keyboard=True)
    
    keyboard = []
    row = []
    
    for i, category in enumerate(sorted(categories)):
        row.append(category)
        if len(row) == 2 or i == len(categories) - 1:
            keyboard.append(row)
            row = []
    
    keyboard.append(["‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∫–∞—Ç–∞–ª–æ–≥", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"])
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def get_accessory_products_keyboard(category: str):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏—Ö"""
    products = []
    for product in PRODUCTS_DATA:
        product_category = product.get('category', '')
        product_subcategory = product.get('subcategory', '')
        if product_category == '–ö–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏–µ' and product_subcategory == category:
            product_name = product.get('name', '')
            if product_name:
                products.append(product_name)
    
    keyboard = []
    row = []
    
    for i, product in enumerate(products):
        row.append(product)
        if len(row) == 2 or i == len(products) - 1:
            keyboard.append(row)
            row = []
    
    if not keyboard:
        keyboard.append(["–¢–æ–≤–∞—Ä—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç"])
    
    keyboard.append(["‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏–º", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"])
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def back_to_catalog_keyboard():
    return ReplyKeyboardMarkup([
        ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∫–∞—Ç–∞–ª–æ–≥", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
    ], resize_keyboard=True)

def cart_keyboard():
    return ReplyKeyboardMarkup([
        ["‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑", "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–∫–∞–∑"],
        ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∫–∞—Ç–∞–ª–æ–≥", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
    ], resize_keyboard=True)

# ---- –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–∞–≥–∞–∑–∏–Ω–∞ ----

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    USER_STATES[user.id] = "main_menu"
    if user.id not in USER_CARTS:
        USER_CARTS[user.id] = []

    add_user(user.id, user.username, user.first_name, user.last_name)

    await update.message.reply_text(
        f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *CloudFM*, {user.first_name}!\n\n"
        "–ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ª—É—á—à–∏–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è –≤–µ–π–ø–∏–Ω–≥–∞ —Å –±—ã—Å—Ç—Ä–æ–π –¥–æ—Å—Ç–∞–≤–∫–æ–π!\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ:",
        reply_markup=main_menu_keyboard(),
        parse_mode="Markdown"
    )
    logger.info(f"User {user.id} started the bot")

async def show_catalog(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    USER_STATES[user.id] = "catalog_menu"

    await update.message.reply_text(
        "üõí *–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤:*\n\n"
        "‚Ä¢ üíß –ñ–∏–¥–∫–æ—Å—Ç–∏ –¥–ª—è —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã—Ö —Å–∏–≥–∞—Ä–µ—Ç\n"
        "‚Ä¢ üö¨ –û–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–µ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ —Å–∏–≥–∞—Ä–µ—Ç—ã\n"
        "‚Ä¢ üåø –ñ–µ–≤–∞—Ç–µ–ª—å–Ω—ã–π —Ç–∞–±–∞–∫\n"
        "‚Ä¢ üîß –ü–æ–¥-—Å–∏—Å—Ç–µ–º—ã (POD-—Å–∏—Å—Ç–µ–º—ã)\n"
        "‚Ä¢ ‚öôÔ∏è –ö–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏–µ –¥–ª—è –ø–æ–¥-—Å–∏—Å—Ç–µ–º\n",
        reply_markup=catalog_menu_keyboard(),
        parse_mode="Markdown"
    )

async def show_liquids(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    USER_STATES[user.id] = "liquids_brands"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∂–∏–¥–∫–æ—Å—Ç–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ
    has_liquids = any(product.get('category') == '–ñ–∏–¥–∫–æ—Å—Ç–∏' for product in PRODUCTS_DATA)
    
    if not has_liquids:
        await update.message.reply_text(
            "‚ùå *–ñ–∏–¥–∫–æ—Å—Ç–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç*\n\n"
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∂–∏–¥–∫–æ—Å—Ç–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –ø—Ä–æ–¥–∞–∂–µ. "
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–∏–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞.",
            parse_mode="Markdown",
            reply_markup=back_to_catalog_keyboard()
        )
        return

    await update.message.reply_text(
        "üíß *–í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–µ–Ω–¥ –∂–∏–¥–∫–æ—Å—Ç–∏:*",
        reply_markup=liquids_brands_keyboard(),
        parse_mode="Markdown"
    )

async def show_disposable(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    USER_STATES[user.id] = "disposable_brands"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –æ–¥–Ω–æ—Ä–∞–∑–∫–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ
    has_disposable = any(product.get('category') == '–û–¥–Ω–æ—Ä–∞–∑–∫–∏' for product in PRODUCTS_DATA)
    
    if not has_disposable:
        await update.message.reply_text(
            "‚ùå *–û–¥–Ω–æ—Ä–∞–∑–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç*\n\n"
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –æ–¥–Ω–æ—Ä–∞–∑–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –ø—Ä–æ–¥–∞–∂–µ. "
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–∏–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞.",
            parse_mode="Markdown",
            reply_markup=back_to_catalog_keyboard()
        )
        return

    await update.message.reply_text(
        "üö¨ *–û–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–µ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ —Å–∏–≥–∞—Ä–µ—Ç—ã:*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–µ–Ω–¥:",
        reply_markup=disposable_brands_keyboard(),
        parse_mode="Markdown"
    )

async def show_pod_accessories(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    USER_STATES[user.id] = "pod_accessories"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏–µ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ
    has_accessories = any(product.get('category') == '–ö–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏–µ' for product in PRODUCTS_DATA)
    
    if not has_accessories:
        await update.message.reply_text(
            "‚ùå *–ö–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç*\n\n"
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –ø—Ä–æ–¥–∞–∂–µ. "
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–∏–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞.",
            parse_mode="Markdown",
            reply_markup=back_to_catalog_keyboard()
        )
        return

    await update.message.reply_text(
        "‚öôÔ∏è *–ö–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏–µ –¥–ª—è –ø–æ–¥-—Å–∏—Å—Ç–µ–º:*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=get_accessories_categories_keyboard(),
        parse_mode="Markdown"
    )

async def handle_brand_selection(update: Update, context: ContextTypes.DEFAULT_TYPE, brand: str, category: str) -> None:
    user = update.effective_user
    USER_STATES[user.id] = f"{category.lower()}_products"
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã —ç—Ç–æ–≥–æ –±—Ä–µ–Ω–¥–∞
    products = []
    for p in PRODUCTS_DATA:
        product_category = p.get('category', '')
        product_brand = p.get('brand', '')
        if product_category == category and product_brand == brand:
            products.append(p)
    
    if not products:
        await update.message.reply_text(
            f"‚ùå –¢–æ–≤–∞—Ä—ã –±—Ä–µ–Ω–¥–∞ {brand} –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç",
            reply_markup=back_to_catalog_keyboard(),
            parse_mode="Markdown"
        )
        return
    
    message_text = f"üéØ *–¢–æ–≤–∞—Ä—ã {brand}:*\n\n"
    for product in products:
        product_name = product.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        product_price = product.get('price', 0)
        message_text += f"‚Ä¢ {product_name} - {product_price} ‚ÇΩ\n"
    
    message_text += "\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç:"
    
    await update.message.reply_text(
        message_text,
        reply_markup=get_products_keyboard(category, brand),
        parse_mode="Markdown"
    )

async def show_accessory_products(update: Update, context: ContextTypes.DEFAULT_TYPE, category: str) -> None:
    user = update.effective_user
    USER_STATES[user.id] = f"accessory_{category}"
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    products = []
    for product in PRODUCTS_DATA:
        product_category = product.get('category', '')
        product_subcategory = product.get('subcategory', '')
        if product_category == '–ö–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏–µ' and product_subcategory == category:
            products.append(product)
    
    if not products:
        await update.message.reply_text(
            f"‚ùå –¢–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}' –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç",
            reply_markup=get_accessories_categories_keyboard(),
            parse_mode="Markdown"
        )
        return
    
    message_text = f"üîß *–¢–æ–≤–∞—Ä—ã {category}:*\n\n"
    for product in products:
        product_name = product.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        product_price = product.get('price', 0)
        message_text += f"‚Ä¢ {product_name} - {product_price} ‚ÇΩ\n"
    
    message_text += "\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç:"
    
    await update.message.reply_text(
        message_text,
        reply_markup=get_accessory_products_keyboard(category),
        parse_mode="Markdown"
    )

async def handle_product_selection(update: Update, context: ContextTypes.DEFAULT_TYPE, product_name: str) -> None:
    user = update.effective_user
    user_id = user.id
    
    # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ–¥—É–∫—Ç –ø–æ –∏–º–µ–Ω–∏
    product = None
    for p in PRODUCTS_DATA:
        if p.get('name') == product_name:
            product = p
            break
    
    if not product:
        await update.message.reply_text("‚ùå –ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    product_id = product.get('product_id', '')
    price = product.get('price', 0)
    image_url = product.get('image_url', '')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–∫—É—Å—ã —É —ç—Ç–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
    has_flavors = product.get('has_flavors', False)
    if has_flavors and product_id in FLAVORS_DATA:
        flavors = FLAVORS_DATA[product_id]
        USER_CURRENT_PRODUCT[user_id] = product_id
        USER_CURRENT_FLAVORS[user_id] = flavors
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –≤–∫—É—Å–æ–≤
        message_text = f"üéØ *{product_name}* - *{price} ‚ÇΩ*\n\n"
        message_text += "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∫—É—Å:\n\n"
        for i, flavor in enumerate(flavors, 1):
            message_text += f"{i}. {flavor}\n"
        
        message_text += f"\nüíµ –¶–µ–Ω–∞: *{price} ‚ÇΩ*"
        
        USER_STATES[user_id] = f"waiting_flavor_{product_id}"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
        if image_url:
            await update.message.reply_photo(
                photo=image_url,
                caption=message_text,
                parse_mode="Markdown"
            )
        else:
            await update.message.reply_text(message_text, parse_mode="Markdown")
        
    else:
        # –ï—Å–ª–∏ —É –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –≤–∫—É—Å–∞, –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ä–∞–∑—É –≤ –∫–æ—Ä–∑–∏–Ω—É
        if user_id not in USER_CARTS:
            USER_CARTS[user_id] = []

        found = False
        for item in USER_CARTS[user_id]:
            if item['name'] == product_name:
                item['quantity'] += 1
                found = True
                break

        if not found:
            USER_CARTS[user_id].append({
                'name': product_name,
                'price': price,
                'quantity': 1
            })

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É
        if image_url:
            await update.message.reply_photo(
                photo=image_url,
                caption=f"‚úÖ *{product_name}* - *{price} ‚ÇΩ* –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!",
                parse_mode="Markdown"
            )
        else:
            await update.message.reply_text(
                f"‚úÖ *{product_name}* - *{price} ‚ÇΩ* –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!",
                parse_mode="Markdown"
            )

# ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞—é—Ç—Å—è —Ç–∞–∫–∏–º–∏ –∂–µ, –∫–∞–∫ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–º –∫–æ–¥–µ)

async def back_to_liquids(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await show_liquids(update, context)

async def back_to_disposable(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await show_disposable(update, context)

async def back_to_accessories(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await show_pod_accessories(update, context)

async def back_to_catalog(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await show_catalog(update, context)

async def back_to_main(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    USER_STATES[user.id] = "main_menu"

    await update.message.reply_text(
        "üè† –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=main_menu_keyboard()
    )

# ... (–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∫–æ–º–∞–Ω–¥ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)

def main() -> None:
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    init_database()
    
    try:
        persistence = PicklePersistence(filepath="bot_persistence")
        application = Application.builder().token(TOKEN).persistence(persistence).build()
        logger.info("–ú–∞–≥–∞–∑–∏–Ω CloudFM —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        categories = set()
        for product in PRODUCTS_DATA:
            category = product.get('category', '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')
            categories.add(category)
        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {', '.join(categories)}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
        return

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("broadcast", admin_broadcast))
    application.add_handler(CommandHandler("stats", admin_stats))
    application.add_handler(CommandHandler("admin_help", admin_help))
    application.add_handler(CommandHandler("reload", reload_data))
    application.add_handler(CommandHandler("stop", stop))

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(handle_callback_query))

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("–ë–æ—Ç-–º–∞–≥–∞–∑–∏–Ω CloudFM –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(PRODUCTS_DATA)} —Ç–æ–≤–∞—Ä–æ–≤ –∏ {sum(len(v) for v in FLAVORS_DATA.values())} –≤–∫—É—Å–æ–≤")
    application.run_polling()

if __name__ == '__main__':
    main()
