import asyncio
import logging
import sqlite3
import csv
from typing import Dict, List
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
    CallbackContext,
    CallbackQueryHandler,
    PersistenceInput,
    PicklePersistence
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å –≤–∞—à–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
TOKEN = "8013532862:AAGG6ywOEfm7s6XgFJPBevxjIjmW_cZ8wZE"
ADMIN_IDS = [711876728, 789800147, 7664673453]
ADMIN_USERNAME = "@malovat21"

# ---- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å CSV ----

def load_products_from_csv() -> List[Dict]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–∑ CSV —Ñ–∞–π–ª–∞"""
    products = []
    try:
        with open('products.csv', 'r', encoding='utf-8') as file:
            reader = csv.DictReader(file)
            for row in reader:
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—É –≤ —á–∏—Å–ª–æ –∏ —Ñ–ª–∞–≥ –≤ –±—É–ª–µ–≤–æ –∑–Ω–∞—á–µ–Ω–∏–µ
                row['price'] = int(row['price'])
                row['has_flavors'] = row['has_flavors'].lower() == 'true'
                products.append(row)
        logging.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(products)} —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ CSV")
    except FileNotFoundError:
        logging.error("–§–∞–π–ª products.csv –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ products.csv: {e}")
    return products

def load_flavors_from_csv() -> Dict[str, List[str]]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤–∫—É—Å—ã –∏–∑ CSV —Ñ–∞–π–ª–∞ –∏ –≥—Ä—É–ø–ø–∏—Ä—É–µ—Ç –ø–æ product_id"""
    flavors_dict = {}
    try:
        with open('flavors.csv', 'r', encoding='utf-8') as file:
            reader = csv.DictReader(file)
            for row in reader:
                product_id = row['product_id']
                if product_id not in flavors_dict:
                    flavors_dict[product_id] = []
                flavors_dict[product_id].append(row['flavor_name'])
        logging.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –≤–∫—É—Å–æ–≤ –¥–ª—è {len(flavors_dict)} —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ CSV")
    except FileNotFoundError:
        logging.error("–§–∞–π–ª flavors.csv –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ flavors.csv: {e}")
    return flavors_dict

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
PRODUCTS_DATA = load_products_from_csv()
FLAVORS_DATA = load_flavors_from_csv()

# ---- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö ----

def init_database():
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            username TEXT,
            first_name TEXT,
            last_name TEXT,
            is_active INTEGER DEFAULT 1,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    conn.commit()
    conn.close()

def add_user(user_id, username, first_name, last_name):
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute('''
        INSERT OR REPLACE INTO users (user_id, username, first_name, last_name, is_active)
        VALUES (?, ?, ?, ?, 1)
    ''', (user_id, username, first_name, last_name))
    conn.commit()
    conn.close()

def get_all_users():
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute('SELECT user_id FROM users WHERE is_active = 1')
    users = [row[0] for row in cursor.fetchall()]
    conn.close()
    return users

def deactivate_user(user_id):
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute('UPDATE users SET is_active = 0 WHERE user_id = ?', (user_id,))
    conn.commit()
    conn.close()

# ---- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è ----

class Utf8FileHandler(logging.FileHandler):
    def __init__(self, filename, mode='a', encoding='utf-8', delay=False):
        super().__init__(filename, mode, encoding, delay)

logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)

file_handler = Utf8FileHandler("bot.log")
file_handler.setFormatter(logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s'))

console_handler = logging.StreamHandler()
console_handler.setFormatter(logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s'))

logger.addHandler(file_handler)
logger.addHandler(console_handler)

# ---- –°–æ—Å—Ç–æ—è–Ω–∏—è –∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ----

USER_STATES = {}
USER_CARTS = {}
USER_CURRENT_PRODUCT = {}
USER_CURRENT_FLAVORS = {}

# ---- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ----

def main_menu_keyboard():
    return ReplyKeyboardMarkup([
        ["üõí –ö–∞—Ç–∞–ª–æ–≥", "üõçÔ∏è –ö–æ—Ä–∑–∏–Ω–∞"],
        ["üöö –î–æ—Å—Ç–∞–≤–∫–∞", "‚ùì –ü–æ–º–æ—â—å"],
        ["üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã"]
    ], resize_keyboard=True)

def catalog_menu_keyboard():
    return ReplyKeyboardMarkup([
        ["üíß –ñ–∏–¥–∫–æ—Å—Ç–∏", "üö¨ –û–¥–Ω–æ—Ä–∞–∑–∫–∏"],
        ["üåø –ñ–µ–≤–∞—Ç–µ–ª—å–Ω—ã–π —Ç–∞–±–∞–∫", "üîß –ü–æ–¥-—Å–∏—Å—Ç–µ–º—ã"],
        ["‚öôÔ∏è –ö–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏–µ –¥–ª—è –ø–æ–¥-—Å–∏—Å—Ç–µ–º"],
        ["üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
    ], resize_keyboard=True)

def liquids_brands_keyboard():
    # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∞–µ–º –±—Ä–µ–Ω–¥—ã –∂–∏–¥–∫–æ—Å—Ç–µ–π –∏–∑ CSV
    brands = set()
    for product in PRODUCTS_DATA:
        if product['category'] == '–ñ–∏–¥–∫–æ—Å—Ç–∏':
            brands.add(product['brand'])
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –±—Ä–µ–Ω–¥—ã –∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–æ 3 –≤ —Ä—è–¥—É
    sorted_brands = sorted(brands)
    keyboard = []
    row = []
    
    for i, brand in enumerate(sorted_brands):
        row.append(brand)
        # –ú–∞–∫—Å–∏–º—É–º 3 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥—É
        if len(row) == 3 or i == len(sorted_brands) - 1:
            keyboard.append(row)
            row = []
    
    # –í—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ä—è–¥
    keyboard.append(["‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∫–∞—Ç–∞–ª–æ–≥", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"])
    
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def disposable_brands_keyboard():
    # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∞–µ–º –±—Ä–µ–Ω–¥—ã –æ–¥–Ω–æ—Ä–∞–∑–æ–∫ –∏–∑ CSV
    brands = set()
    for product in PRODUCTS_DATA:
        if product['category'] == '–û–¥–Ω–æ—Ä–∞–∑–∫–∏':
            brands.add(product['brand'])
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –±—Ä–µ–Ω–¥—ã –∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–æ 3 –≤ —Ä—è–¥—É
    sorted_brands = sorted(brands)
    keyboard = []
    row = []
    
    for i, brand in enumerate(sorted_brands):
        row.append(brand)
        # –ú–∞–∫—Å–∏–º—É–º 3 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥—É
        if len(row) == 3 or i == len(sorted_brands) - 1:
            keyboard.append(row)
            row = []
    
    # –í—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ä—è–¥
    keyboard.append(["‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∫–∞—Ç–∞–ª–æ–≥", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"])
    
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def get_products_keyboard(category, brand):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±—Ä–µ–Ω–¥–∞"""
    products = []
    for product in PRODUCTS_DATA:
        if product['category'] == category and product['brand'] == brand:
            products.append(product['name'])
    
    keyboard = []
    row = []
    
    # –ú–∞–∫—Å–∏–º—É–º 2 —Ç–æ–≤–∞—Ä–∞ –≤ —Ä—è–¥—É (—Ç–∞–∫ –ª—É—á—à–µ —Å–º–æ—Ç—Ä–∏—Ç—Å—è)
    for i, product in enumerate(products):
        row.append(product)
        if len(row) == 2 or i == len(products) - 1:
            keyboard.append(row)
            row = []
    
    back_text = "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∂–∏–¥–∫–æ—Å—Ç—è–º" if category == "–ñ–∏–¥–∫–æ—Å—Ç–∏" else "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –æ–¥–Ω–æ—Ä–∞–∑–∫–∞–º"
    keyboard.append([back_text, "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"])
    
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def back_to_catalog_keyboard():
    return ReplyKeyboardMarkup([
        ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∫–∞—Ç–∞–ª–æ–≥", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
    ], resize_keyboard=True)

def cart_keyboard():
    return ReplyKeyboardMarkup([
        ["‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑", "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–∫–∞–∑"],
        ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∫–∞—Ç–∞–ª–æ–≥", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
    ], resize_keyboard=True)

def pod_accessories_keyboard():
    return ReplyKeyboardMarkup([
        ["–ò—Å–ø–∞—Ä–∏—Ç–µ–ª–∏", "–ö–∞—Ä—Ç—Ä–∏–¥–∂—ã"],
        ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∫–∞—Ç–∞–ª–æ–≥", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
    ], resize_keyboard=True)

def cartridges_keyboard():
    return ReplyKeyboardMarkup([
        ["PLONQ 3ml 0.4 –û–º", "Vaporesso XROS 3ML 0.4 –û–º"],
        ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏–º", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
    ], resize_keyboard=True)

# ---- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ ----

async def admin_broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    if user.id not in ADMIN_IDS:
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    if not context.args:
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /broadcast <—Å–æ–æ–±—â–µ–Ω–∏–µ>")
        return
    
    message = update.message.text.replace('/broadcast ', '', 1).strip()
    await send_broadcast(context, message)
    await update.message.reply_text("‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!")

async def admin_stats(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    if user.id not in ADMIN_IDS:
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute('SELECT COUNT(*) FROM users WHERE is_active = 1')
    total_users = cursor.fetchone()[0]
    
    cursor.execute('SELECT COUNT(*) FROM users WHERE DATE(created_at) = DATE("now")')
    new_today = cursor.fetchone()[0]
    conn.close()
    
    active_users = len(USER_CARTS)
    active_carts = sum(1 for cart in USER_CARTS.values() if cart)
    
    stats_text = f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:*\n\n"
    stats_text += f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
    stats_text += f"üìà –ù–æ–≤—ã—Ö —Å–µ–≥–æ–¥–Ω—è: {new_today}\n"
    stats_text += f"üî• –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π: {active_users}\n"
    stats_text += f"üõí –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ—Ä–∑–∏–Ω: {active_carts}\n"
    stats_text += f"üìù –°–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(USER_STATES)}\n"
    stats_text += f"üì¶ –¢–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ: {len(PRODUCTS_DATA)}\n"
    stats_text += f"üéØ –í–∫—É—Å–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {sum(len(v) for v in FLAVORS_DATA.values())}"
    
    await update.message.reply_text(stats_text, parse_mode="Markdown")

async def admin_help(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    if user.id not in ADMIN_IDS:
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    help_text = (
        "üõ†Ô∏è *–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:*\n\n"
        "/broadcast <—Ç–µ–∫—Å—Ç> - –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n"
        "/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞\n"
        "/reload - –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ CSV\n"
        "/stop - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞\n"
        "/admin_help - –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –∞–¥–º–∏–Ω–∞\n\n"
        f"üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã: {', '.join(str(admin_id) for admin_id in ADMIN_IDS)}"
    )
    await update.message.reply_text(help_text, parse_mode="Markdown")

async def reload_data(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ CSV —Ñ–∞–π–ª–æ–≤"""
    user = update.effective_user
    if user.id not in ADMIN_IDS:
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    global PRODUCTS_DATA, FLAVORS_DATA
    PRODUCTS_DATA = load_products_from_csv()
    FLAVORS_DATA = load_flavors_from_csv()
    
    await update.message.reply_text(
        f"‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!\n"
        f"–¢–æ–≤–∞—Ä–æ–≤: {len(PRODUCTS_DATA)}\n"
        f"–¢–æ–≤–∞—Ä–æ–≤ —Å –≤–∫—É—Å–∞–º–∏: {len(FLAVORS_DATA)}"
    )
    logger.info(f"Data reloaded by admin {user.id}")

async def send_broadcast(context: ContextTypes.DEFAULT_TYPE, message: str) -> None:
    success_count = 0
    fail_count = 0
    
    broadcast_text = (
        "üì¢ *–†–ê–°–°–´–õ–ö–ê –û–¢ –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê*\n\n"
        f"{message}\n\n"
        "_–≠—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –æ—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –Ω–µ–≥–æ._"
    )
    
    user_ids = get_all_users()
    
    if not user_ids:
        for admin_id in ADMIN_IDS:
            await context.bot.send_message(
                chat_id=admin_id,
                text="‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏",
                parse_mode="Markdown"
            )
        return
    
    for user_id in user_ids:
        try:
            await context.bot.send_message(
                chat_id=user_id,
                text=broadcast_text,
                parse_mode="Markdown"
            )
            success_count += 1
            await asyncio.sleep(0.1)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            deactivate_user(user_id)
            fail_count += 1
    
    report_text = (
        f"üìä *–û—Ç—á–µ—Ç –æ —Ä–∞—Å—Å—ã–ª–∫–µ:*\n\n"
        f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success_count}\n"
        f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {fail_count}\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ: {len(user_ids)}\n"
        f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ: {message[:100]}..."
    )
    
    for admin_id in ADMIN_IDS:
        try:
            await context.bot.send_message(
                chat_id=admin_id,
                text=report_text,
                parse_mode="Markdown"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ –∞–¥–º–∏–Ω—É {admin_id}: {e}")

# ---- –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–∞–≥–∞–∑–∏–Ω–∞ ----

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    USER_STATES[user.id] = "main_menu"
    if user.id not in USER_CARTS:
        USER_CARTS[user.id] = []

    add_user(user.id, user.username, user.first_name, user.last_name)

    await update.message.reply_text(
        f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *CloudFM*, {user.first_name}!\n\n"
        "–ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ª—É—á—à–∏–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è –≤–µ–π–ø–∏–Ω–≥–∞ —Å –±—ã—Å—Ç—Ä–æ–π –¥–æ—Å—Ç–∞–≤–∫–æ–π!\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ:",
        reply_markup=main_menu_keyboard(),
        parse_mode="Markdown"
    )
    logger.info(f"User {user.id} started the bot")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        "üìñ *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –º–∞–≥–∞–∑–∏–Ω—É CloudFM*\n\n"
        "–í–æ—Ç —á—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å:\n"
        "- üõí *–ö–∞—Ç–∞–ª–æ–≥* - –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–≤–∞—Ä—ã\n"
        "- üõçÔ∏è *–ö–æ—Ä–∑–∏–Ω–∞* - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—à–∏ –∑–∞–∫–∞–∑—ã\n"
        "- üöö *–î–æ—Å—Ç–∞–≤–∫–∞* - —É–∑–Ω–∞—Ç—å —É—Å–ª–æ–≤–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏\n"
        "- üìû *–ö–æ–Ω—Ç–∞–∫—Ç–∞* - —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏\n"
        "- /start - –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        parse_mode="Markdown"
    )

async def show_catalog(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    USER_STATES[user.id] = "catalog_menu"

    await update.message.reply_text(
        "üõí *–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—É —Ç–æ–≤–∞—Ä–æ–≤:*\n\n"
        "‚Ä¢ üíß –ñ–∏–¥–∫–æ—Å—Ç–∏ –¥–ª—è —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã—Ö —Å–∏–≥–∞—Ä–µ—Ç\n"
        "‚Ä¢ üö¨ –û–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–µ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ —Å–∏–≥–∞—Ä–µ—Ç—ã\n"
        "‚Ä¢ üåø –ñ–µ–≤–∞—Ç–µ–ª—å–Ω—ã–π —Ç–∞–±–∞–∫\n"
        "‚Ä¢ üîß –ü–æ–¥-—Å–∏—Å—Ç–µ–º—ã (POD-—Å–∏—Å—Ç–µ–º—ã)\n"
        "‚Ä¢ ‚öôÔ∏è –ö–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏–µ –¥–ª—è –ø–æ–¥-—Å–∏—Å—Ç–µ–º\n",
        reply_markup=catalog_menu_keyboard(),
        parse_mode="Markdown"
    )

async def show_liquids(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    USER_STATES[user.id] = "liquids_brands"

    await update.message.reply_text(
        "üíß *–í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–µ–Ω–¥ –∂–∏–¥–∫–æ—Å—Ç–∏:*",
        reply_markup=liquids_brands_keyboard(),
        parse_mode="Markdown"
    )

async def show_disposable(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    USER_STATES[user.id] = "disposable_brands"

    await update.message.reply_text(
        "üö¨ *–û–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–µ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ —Å–∏–≥–∞—Ä–µ—Ç—ã:*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–µ–Ω–¥:",
        reply_markup=disposable_brands_keyboard(),
        parse_mode="Markdown"
    )

async def show_pod_accessories(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    USER_STATES[user.id] = "pod_accessories"

    await update.message.reply_text(
        "‚öôÔ∏è *–ö–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏–µ –¥–ª—è –ø–æ–¥-—Å–∏—Å—Ç–µ–º:*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏—Ö:",
        reply_markup=pod_accessories_keyboard(),
        parse_mode="Markdown"
    )

async def show_cartridges(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    USER_STATES[user.id] = "cartridges"

    await update.message.reply_text(
        "üîß *–ö–∞—Ä—Ç—Ä–∏–¥–∂—ã –¥–ª—è –ø–æ–¥-—Å–∏—Å—Ç–µ–º:*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–∞—Ä—Ç—Ä–∏–¥–∂–∞:",
        reply_markup=cartridges_keyboard(),
        parse_mode="Markdown"
    )

async def handle_brand_selection(update: Update, context: ContextTypes.DEFAULT_TYPE, brand: str, category: str) -> None:
    user = update.effective_user
    USER_STATES[user.id] = f"{category.lower()}_products"
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã —ç—Ç–æ–≥–æ –±—Ä–µ–Ω–¥–∞
    products = [p for p in PRODUCTS_DATA if p['category'] == category and p['brand'] == brand]
    
    if not products:
        await update.message.reply_text(
            f"‚ùå –¢–æ–≤–∞—Ä—ã –±—Ä–µ–Ω–¥–∞ {brand} –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç",
            reply_markup=back_to_catalog_keyboard(),
            parse_mode="Markdown"
        )
        return
    
    message_text = f"üéØ *–¢–æ–≤–∞—Ä—ã {brand}:*\n\n"
    for product in products:
        message_text += f"‚Ä¢ {product['name']} - {product['price']} ‚ÇΩ\n"
    
    message_text += "\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç:"
    
    await update.message.reply_text(
        message_text,
        reply_markup=get_products_keyboard(category, brand),
        parse_mode="Markdown"
    )

async def handle_product_selection(update: Update, context: ContextTypes.DEFAULT_TYPE, product_name: str) -> None:
    user = update.effective_user
    user_id = user.id
    
    # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ–¥—É–∫—Ç –ø–æ –∏–º–µ–Ω–∏
    product = None
    for p in PRODUCTS_DATA:
        if p['name'] == product_name:
            product = p
            break
    
    if not product:
        await update.message.reply_text("‚ùå –ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    product_id = product['product_id']
    price = product['price']
    image_url = product['image_url']
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–∫—É—Å—ã —É —ç—Ç–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
    if product['has_flavors'] and product_id in FLAVORS_DATA:
        flavors = FLAVORS_DATA[product_id]
        USER_CURRENT_PRODUCT[user_id] = product_id
        USER_CURRENT_FLAVORS[user_id] = flavors
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –≤–∫—É—Å–æ–≤
        message_text = f"üéØ *{product_name}* - *{price} ‚ÇΩ*\n\n"
        message_text += "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∫—É—Å:\n\n"
        for i, flavor in enumerate(flavors, 1):
            message_text += f"{i}. {flavor}\n"
        
        message_text += f"\nüíµ –¶–µ–Ω–∞: *{price} ‚ÇΩ*"
        
        USER_STATES[user_id] = f"waiting_flavor_{product_id}"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
        if image_url:
            await update.message.reply_photo(
                photo=image_url,
                caption=message_text,
                parse_mode="Markdown"
            )
        else:
            await update.message.reply_text(message_text, parse_mode="Markdown")
        
    else:
        # –ï—Å–ª–∏ —É –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –≤–∫—É—Å–∞, –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ä–∞–∑—É –≤ –∫–æ—Ä–∑–∏–Ω—É
        if user_id not in USER_CARTS:
            USER_CARTS[user_id] = []

        found = False
        for item in USER_CARTS[user_id]:
            if item['name'] == product_name:
                item['quantity'] += 1
                found = True
                break

        if not found:
            USER_CARTS[user_id].append({
                'name': product_name,
                'price': price,
                'quantity': 1
            })

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É
        if image_url:
            await update.message.reply_photo(
                photo=image_url,
                caption=f"‚úÖ *{product_name}* - *{price} ‚ÇΩ* –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!",
                parse_mode="Markdown"
            )
        else:
            await update.message.reply_text(
                f"‚úÖ *{product_name}* - *{price} ‚ÇΩ* –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!",
                parse_mode="Markdown"
            )

async def back_to_liquids(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await show_liquids(update, context)

async def back_to_disposable(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await show_disposable(update, context)

async def back_to_accessories(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await show_pod_accessories(update, context)

async def back_to_catalog(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await show_catalog(update, context)

async def back_to_main(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    USER_STATES[user.id] = "main_menu"

    await update.message.reply_text(
        "üè† –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=main_menu_keyboard()
    )

async def show_cart(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    cart = USER_CARTS.get(user.id, [])
    USER_STATES[user.id] = "cart"

    cart_text = "üõçÔ∏è *–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞*\n\n"
    if not cart:
        cart_text += "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞"
    else:
        total = 0
        for i, item in enumerate(cart, 1):
            cart_text += f"{i}. {item['name']} - {item['quantity']} —à—Ç. ({item['price']} ‚ÇΩ)\n"
            total += item['price'] * item['quantity']
        cart_text += f"\n–ò—Ç–æ–≥–æ: *{total} ‚ÇΩ*\n"

    await update.message.reply_text(
        cart_text,
        reply_markup=cart_keyboard(),
        parse_mode="Markdown"
    )

async def delivery_info(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    info = (
        "üöö *–£—Å–ª–æ–≤–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏ CloudFM*\n\n"
        "‚Ä¢ *–°–∞–º–æ–≤—ã–≤–æ–∑:* –ê–¥—Ä–µ—Å —É—Ç–æ—á–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–∫–∞–∑–µ —É –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ @CloudFMMSC (–ü–Ω-–í—Å 10:00-22:00)\n"
        "‚Ä¢ *–î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –≥–æ—Ä–æ–¥—É:* –¶–µ–Ω—É –¥–æ—Å—Ç–∞–≤–∫–∏ —É—Ç–æ—á–Ω—è–π—Ç–µ —É –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ @CloudFMMSC (–ü–Ω-–í—Å 10:00-22:00)\n"
        "‚Ä¢ *–≠–∫—Å–ø—Ä–µ—Å—Å-–¥–æ—Å—Ç–∞–≤–∫–∞:* –ü—Ä–∏ –∑–∞–∫–∞–∑–µ –æ—Ç 3000 ‚ÇΩ, —Ü–µ–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ 500 ‚ÇΩ (–≤ —Ç–µ—á–µ–Ω–∏–µ 2 —á–∞—Å–æ–≤)\n\n"
        "–í—Å–µ –∑–∞–∫–∞–∑—ã –æ—Ñ–æ—Ä–º–ª—è—é—Ç—Å—è –∞–Ω–æ–Ω–∏–º–Ω–æ!"
    )
    await update.message.reply_text(info, parse_mode="Markdown")

async def contacts(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    contact_info = (
        "üìû *–ö–æ–Ω—Ç–∞–∫—Ç—ã –º–∞–≥–∞–∑–∏–Ω–∞ CloudFM*\n\n"
        "‚Ä¢ –¢–µ–ª–µ–≥—Ä–∞–º: @CloudFMMSC\n"
        "–ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã: 24/7\n\n"
        "–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –æ–ø—Ç–æ–≤—ã—Ö –∑–∞–∫—É–ø–æ–≤: @CloudFMMSC"
    )
    await update.message.reply_text(contact_info, parse_mode="Markdown")

async def send_order(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    cart = USER_CARTS.get(user.id, [])

    if not cart:
        await update.message.reply_text(
            "‚ùå –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞! –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –ø–µ—Ä–µ–¥ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º –∑–∞–∫–∞–∑–∞.",
            reply_markup=main_menu_keyboard()
        )
        return

    order_text = f"üõí *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!*\n\n"
    order_text += f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: [{user.first_name}](tg://user?id={user.id})\n"
    order_text += f"üÜî ID: `{user.id}`\n\n"
    order_text += "üìù *–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:*\n"

    total = 0
    for item in cart:
        item_total = item['price'] * item['quantity']
        order_text += f"- {item['name']} - {item['quantity']} —à—Ç. = {item_total} ‚ÇΩ\n"
        total += item_total

    order_text += f"\nüíµ *–ò—Ç–æ–≥–æ: {total} ‚ÇΩ*"

    success = False
    for admin_id in ADMIN_IDS:
        try:
            await context.bot.send_message(
                chat_id=admin_id,
                text=order_text,
                parse_mode="Markdown"
            )
            success = True
            logger.info(f"Order sent to admin {admin_id} for user {user.id}")
        except Exception as e:
            logger.error(f"Error sending order to admin {admin_id}: {e}")

    if success:
        await update.message.reply_text(
            "‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω! –°–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –æ–ø–µ—Ä–∞—Ç–æ—Ä –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.",
            reply_markup=main_menu_keyboard()
        )
        USER_CARTS[user.id] = []
    else:
        await update.message.reply_text(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ —á–µ—Ä–µ–∑ –º–µ–Ω—é –ö–æ–Ω—Ç–∞–∫—Ç—ã."
        )

async def edit_order(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    cart = USER_CARTS.get(user.id, [])
    USER_STATES[user.id] = "editing_cart"

    if not cart:
        await update.message.reply_text(
            "‚ùå –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!",
            reply_markup=main_menu_keyboard()
        )
        return

    cart_text = "‚úèÔ∏è *–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω–∞*\n\n"
    cart_text += "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n\n"

    total = 0
    for i, item in enumerate(cart, 1):
        item_total = item['price'] * item['quantity']
        cart_text += f"{i}. {item['name']} - {item['quantity']} —à—Ç. = {item_total} ‚ÇΩ\n"
        total += item_total

    cart_text += f"\nüíµ –ò—Ç–æ–≥–æ: *{total} ‚ÇΩ*"

    await update.message.reply_text(
        cart_text,
        reply_markup=cart_keyboard(),
        parse_mode="Markdown"
    )

async def stop(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    if user.id in ADMIN_IDS:
        await update.message.reply_text("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω...")
        logger.warning(f"Bot stopped by admin {user.id}")
        await context.application.stop()
    else:
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        logger.warning(f"Unauthorized stop attempt by {user.id}")

# ---- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫ ----

async def handle_callback_query(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    user = update.effective_user
    user_id = user.id

    await query.answer()

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É
    if query.data.startswith("add_"):
        product_id = query.data[4:]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø—Ä–æ–¥—É–∫—Ç
        product_exists = any(p['product_id'] == product_id for p in PRODUCTS_DATA)
        
        if product_exists:
            # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ –≤–∫—É—Å–∞
            await handle_flavor_selection_from_id(update, context, product_id)
        else:
            await query.edit_message_caption(
                caption="‚ùå –≠—Ç–æ—Ç —Ç–æ–≤–∞—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",
                parse_mode="Markdown"
            )

async def handle_flavor_selection_from_id(update: Update, context: ContextTypes.DEFAULT_TYPE, product_id: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–∫—É—Å–∞ –ø–æ product_id (–¥–ª—è –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫)"""
    user = update.effective_user
    user_id = user.id
    
    # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ–¥—É–∫—Ç –ø–æ ID
    product = None
    for p in PRODUCTS_DATA:
        if p['product_id'] == product_id:
            product = p
            break
    
    if not product:
        await update.callback_query.edit_message_caption(
            caption="‚ùå –ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
            parse_mode="Markdown"
        )
        return
    
    product_name = product['name']
    price = product['price']
    image_url = product['image_url']
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–∫—É—Å—ã —É —ç—Ç–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
    if product['has_flavors'] and product_id in FLAVORS_DATA:
        flavors = FLAVORS_DATA[product_id]
        USER_CURRENT_PRODUCT[user_id] = product_id
        USER_CURRENT_FLAVORS[user_id] = flavors
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –≤–∫—É—Å–æ–≤
        message_text = f"üéØ *{product_name}* - *{price} ‚ÇΩ*\n\n"
        message_text += "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∫—É—Å:\n\n"
        for i, flavor in enumerate(flavors, 1):
            message_text += f"{i}. {flavor}\n"
        
        message_text += f"\nüíµ –¶–µ–Ω–∞: *{price} ‚ÇΩ*"
        
        USER_STATES[user_id] = f"waiting_flavor_{product_id}"
        
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ
        if image_url:
            await update.callback_query.edit_message_caption(
                caption=message_text,
                parse_mode="Markdown"
            )
        else:
            await update.callback_query.edit_message_text(
                text=message_text,
                parse_mode="Markdown"
            )
        
    else:
        # –ï—Å–ª–∏ —É –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –≤–∫—É—Å–∞, –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ä–∞–∑—É –≤ –∫–æ—Ä–∑–∏–Ω—É
        if user_id not in USER_CARTS:
            USER_CARTS[user_id] = []

        found = False
        for item in USER_CARTS[user_id]:
            if item['name'] == product_name:
                item['quantity'] += 1
                found = True
                break

        if not found:
            USER_CARTS[user_id].append({
                'name': product_name,
                'price': price,
                'quantity': 1
            })

        await update.callback_query.edit_message_caption(
            caption=f"‚úÖ *{product_name}* - *{price} ‚ÇΩ* –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!",
            parse_mode="Markdown"
        )

# ---- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π ----

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    text = update.message.text
    user = update.effective_user
    user_id = user.id

    logger.info(f"=== –û–ë–†–ê–ë–û–¢–ö–ê –°–û–û–ë–©–ï–ù–ò–Ø ===")
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}")
    logger.info(f"–¢–µ–∫—Å—Ç: '{text}'")
    logger.info(f"–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {USER_STATES.get(user_id, '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')}")
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    navigation_commands = {
        "‚¨ÖÔ∏è –Ω–∞–∑–∞–¥ –∫ –∂–∏–¥–∫–æ—Å—Ç—è–º": back_to_liquids,
        "‚¨ÖÔ∏è –Ω–∞–∑–∞–¥ –∫ –æ–¥–Ω–æ—Ä–∞–∑–∫–∞–º": back_to_disposable,
        "‚¨ÖÔ∏è –Ω–∞–∑–∞–¥ –∫ –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏–º": back_to_accessories,
        "‚¨ÖÔ∏è –Ω–∞–∑–∞–¥ –≤ –∫–∞—Ç–∞–ª–æ–≥": back_to_catalog,
        "üè† –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é": back_to_main,
        "üõí –∫–∞—Ç–∞–ª–æ–≥": show_catalog,
        "üõçÔ∏è –∫–æ—Ä–∑–∏–Ω–∞": show_cart,
        "üöö –¥–æ—Å—Ç–∞–≤–∫–∞": delivery_info,
        "‚ùì –ø–æ–º–æ—â—å": help_command,
        "üìû –∫–æ–Ω—Ç–∞–∫—Ç—ã": contacts
    }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    normalized_text = text.lower().strip()
    for command, handler in navigation_commands.items():
        if normalized_text == command.lower():
            await handler(update, context)
            if command in ["üè† –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "‚¨ÖÔ∏è –Ω–∞–∑–∞–¥ –≤ –∫–∞—Ç–∞–ª–æ–≥", "üõí –∫–∞—Ç–∞–ª–æ–≥"]:
                USER_STATES[user_id] = "main_menu" if command == "üè† –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" else "catalog_menu"
            return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–∫—É—Å–∞
    current_state = USER_STATES.get(user_id, "")
    if current_state.startswith("waiting_flavor_"):
        if text.isdigit():
            flavor_index = int(text) - 1
            product_id = USER_CURRENT_PRODUCT.get(user_id)
            flavors = USER_CURRENT_FLAVORS.get(user_id, [])
            
            if not product_id or not flavors:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≤–∫—É—Å–∞")
                return
            
            if 0 <= flavor_index < len(flavors):
                flavor = flavors[flavor_index]
                
                # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ–¥—É–∫—Ç
                product = None
                for p in PRODUCTS_DATA:
                    if p['product_id'] == product_id:
                        product = p
                        break
                
                if product:
                    product_name_with_flavor = f"{product['name']} - {flavor}"
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ—Ä–∑–∏–Ω—É
                    if user_id not in USER_CARTS:
                        USER_CARTS[user_id] = []

                    found = False
                    for item in USER_CARTS[user_id]:
                        if item['name'] == product_name_with_flavor:
                            item['quantity'] += 1
                            found = True
                            break

                    if not found:
                        USER_CARTS[user_id].append({
                            'name': product_name_with_flavor,
                            'price': product['price'],
                            'quantity': 1
                        })

                    await update.message.reply_text(
                        f"‚úÖ {product_name_with_flavor} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!",
                        parse_mode="Markdown"
                    )
                    
                    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                    USER_STATES[user_id] = "main_menu"
                else:
                    await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –ø—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            else:
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –≤–∫—É—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ü–∏—Ñ—Ä—É –∏–∑ —Å–ø–∏—Å–∫–∞.")
        else:
            await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä—É, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –≤–∫—É—Å—É, –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.")
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    if text == "üõí –ö–∞—Ç–∞–ª–æ–≥":
        await show_catalog(update, context)
    elif text == "üõçÔ∏è –ö–æ—Ä–∑–∏–Ω–∞":
        await show_cart(update, context)
    elif text == "üöö –î–æ—Å—Ç–∞–≤–∫–∞":
        await delivery_info(update, context)
    elif text == "‚ùì –ü–æ–º–æ—â—å":
        await help_command(update, context)
    elif text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã":
        await contacts(update, context)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é –∫–∞—Ç–∞–ª–æ–≥–∞
    elif text == "üíß –ñ–∏–¥–∫–æ—Å—Ç–∏":
        await show_liquids(update, context)
    elif text == "üö¨ –û–¥–Ω–æ—Ä–∞–∑–∫–∏":
        await show_disposable(update, context)
    elif text == "üåø –ñ–µ–≤–∞—Ç–µ–ª—å–Ω—ã–π —Ç–∞–±–∞–∫":
        await update.message.reply_text(
            "‚ùå *–¢–æ–≤–∞—Ä –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç*\n\n"
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ñ–µ–≤–∞—Ç–µ–ª—å–Ω—ã–π —Ç–∞–±–∞–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –ø—Ä–æ–¥–∞–∂–µ. "
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–∏–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞.",
            parse_mode="Markdown",
            reply_markup=back_to_catalog_keyboard()
        )
    elif text == "üîß –ü–æ–¥-—Å–∏—Å—Ç–µ–º—ã":
        await update.message.reply_text(
            "‚ùå *—Ç–æ–≤–∞—Ä –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç*\n\n"
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–¥-—Å–∏—Å—Ç–µ–º—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –ø—Ä–æ–¥–∞–∂–µ. "
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–∏–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞.",
            parse_mode="Markdown",
            reply_markup=back_to_catalog_keyboard()
        )
    elif text == "‚öôÔ∏è –ö–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏–µ –¥–ª—è –ø–æ–¥-—Å–∏—Å—Ç–µ–º":
        await show_pod_accessories(update, context)
    elif text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await back_to_main(update, context)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –±—Ä–µ–Ω–¥–æ–≤ –∂–∏–¥–∫–æ—Å—Ç–µ–π
    elif USER_STATES.get(user_id) == "liquids_brands":
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –±—Ä–µ–Ω–¥—ã –∂–∏–¥–∫–æ—Å—Ç–µ–π –∏–∑ CSV
        liquid_brands = set()
        for product in PRODUCTS_DATA:
            if product['category'] == '–ñ–∏–¥–∫–æ—Å—Ç–∏':
                liquid_brands.add(product['brand'])
        
        if text in liquid_brands:
            await handle_brand_selection(update, context, text, "–ñ–∏–¥–∫–æ—Å—Ç–∏")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –±—Ä–µ–Ω–¥–æ–≤ –æ–¥–Ω–æ—Ä–∞–∑–æ–∫
    elif USER_STATES.get(user_id) == "disposable_brands":
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –±—Ä–µ–Ω–¥—ã –æ–¥–Ω–æ—Ä–∞–∑–æ–∫ –∏–∑ CSV
        disposable_brands = set()
        for product in PRODUCTS_DATA:
            if product['category'] == '–û–¥–Ω–æ—Ä–∞–∑–∫–∏':
                disposable_brands.add(product['brand'])
        
        if text in disposable_brands:
            await handle_brand_selection(update, context, text, "–û–¥–Ω–æ—Ä–∞–∑–∫–∏")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∂–∏–¥–∫–æ—Å—Ç–µ–π
    elif USER_STATES.get(user_id) in ["–∂–∏–¥–∫–æ—Å—Ç–∏_products", "–æ–¥–Ω–æ—Ä–∞–∑–∫–∏_products"]:
        category = "–ñ–∏–¥–∫–æ—Å—Ç–∏" if USER_STATES[user_id] == "–∂–∏–¥–∫–æ—Å—Ç–∏_products" else "–û–¥–Ω–æ—Ä–∞–∑–∫–∏"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–æ–π —Ç–æ–≤–∞—Ä –≤ CSV
        product_exists = any(p['name'] == text for p in PRODUCTS_DATA if p['category'] == category)
        
        if product_exists:
            await handle_product_selection(update, context, text)
        elif text in ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∂–∏–¥–∫–æ—Å—Ç—è–º", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –æ–¥–Ω–æ—Ä–∞–∑–∫–∞–º"]:
            if "–∂–∏–¥–∫–æ—Å—Ç–∏" in text:
                await back_to_liquids(update, context)
            else:
                await back_to_disposable(update, context)
        elif text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            await back_to_main(update, context)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏—Ö
    elif USER_STATES.get(user_id) == "pod_accessories":
        if text == "–ò—Å–ø–∞—Ä–∏—Ç–µ–ª–∏":
            await update.message.reply_text(
                "‚ùå *–¢–æ–≤–∞—Ä –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç*\n\n"
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∏—Å–ø–∞—Ä–∏—Ç–µ–ª–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –ø—Ä–æ–¥–∞–∂–µ. "
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–∏–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞.",
                parse_mode="Markdown",
                reply_markup=back_to_catalog_keyboard()
            )
        elif text == "–ö–∞—Ä—Ç—Ä–∏–¥–∂—ã":
            await show_cartridges(update, context)
        elif text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∫–∞—Ç–∞–ª–æ–≥":
            await back_to_catalog(update, context)
        elif text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            await back_to_main(update, context)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ä—Ç—Ä–∏–¥–∂–µ–π
    elif USER_STATES.get(user_id) == "cartridges":
        if text == "PLONQ 3ml 0.4 –û–º":
            await handle_product_selection(update, context, "–ö–∞—Ä—Ç—Ä–∏–¥–∂ PLONQ 3ml 0.4 –û–º")
        elif text == "Vaporesso XROS 3ML 0.4 –û–º":
            await handle_product_selection(update, context, "–ö–∞—Ä—Ç—Ä–∏–¥–∂ Vaporesso XROS 3ML 0.4 –û–º")
        elif text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏–º":
            USER_STATES[user_id] = "pod_accessories"
            await show_pod_accessories(update, context)
        elif text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            await back_to_main(update, context)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    elif text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∫–∞—Ç–∞–ª–æ–≥":
        await back_to_catalog(update, context)
    elif text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∂–∏–¥–∫–æ—Å—Ç—è–º":
        await back_to_liquids(update, context)
    elif text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –æ–¥–Ω–æ—Ä–∞–∑–∫–∞–º":
        await back_to_disposable(update, context)
    elif text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏–º":
        await back_to_accessories(update, context)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã
    elif text == "‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑":
        await send_order(update, context)
    elif text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–∫–∞–∑":
        await edit_order(update, context)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã
    elif text.isdigit() and USER_STATES.get(user_id) == "editing_cart":
        item_num = int(text)
        cart = USER_CARTS.get(user_id, [])
        if 1 <= item_num <= len(cart):
            removed = cart.pop(item_num - 1)
            await update.message.reply_text(
                f"‚ùå –¢–æ–≤–∞—Ä '{removed['name']}' —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω–∞",
                reply_markup=cart_keyboard()
            )
            USER_STATES[user_id] = "cart"
            await show_cart(update, context)
        else:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞",
                reply_markup=cart_keyboard()
            )
        return

    else:
        await update.message.reply_text(
            "–Ø –Ω–µ –ø–æ–Ω—è–ª –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /start"
        )

# ---- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ----

def main() -> None:
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    init_database()
    
    try:
        persistence = PicklePersistence(filepath="bot_persistence")
        application = Application.builder().token(TOKEN).persistence(persistence).build()
        logger.info("–ú–∞–≥–∞–∑–∏–Ω CloudFM —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
        return

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("broadcast", admin_broadcast))
    application.add_handler(CommandHandler("stats", admin_stats))
    application.add_handler(CommandHandler("admin_help", admin_help))
    application.add_handler(CommandHandler("reload", reload_data))
    application.add_handler(CommandHandler("stop", stop))

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(handle_callback_query))

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("–ë–æ—Ç-–º–∞–≥–∞–∑–∏–Ω CloudFM –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(PRODUCTS_DATA)} —Ç–æ–≤–∞—Ä–æ–≤ –∏ {sum(len(v) for v in FLAVORS_DATA.values())} –≤–∫—É—Å–æ–≤")
    application.run_polling()

if __name__ == '__main__':
    main()


