import logging
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
    CallbackQueryHandler
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TOKEN = "8013532862:AAGG6ywOEfm7s6XgFJPBevxjIjmW_cZ8wZE"
ADMIN_IDS = [711876728, 789800147]

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.FileHandler("bot.log", encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
USER_STATES = {}
USER_CARTS = {}
USER_CURRENT_SELECTION = {}

# –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–æ–≤
PRODUCTS = {
    "liquids": {
        "HUSKY": {
            "HUSKY IMPORT MALAYSIAN SALT (20MG) 30 ml": {
                "price": 400,
                "flavors": ["Gum Wolf (–ê—Ä–±—É–∑–Ω–∞—è –∂–≤–∞—á–∫–∞)", "Sour Beast (–ö–∏–≤–∏, –∫–ª—É–±–Ω–∏–∫–∞ –∏ –ø–µ—Ä–µ—á–Ω–∞—è –º—è—Ç–∞)"],
                "image": "https://iimg.su/i/QxOz3w"
            }
        },
        "PODONKI": {
            "PODONKI ARCADE Salt 2% 30 ml": {
                "price": 400,
                "flavors": ["–í–∏–Ω–æ–≥—Ä–∞–¥ –ï–∂–µ–≤–∏–∫–∞", "–í–∏—à–Ω–µ–≤—ã–π —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫", "–õ–∏–º–æ–Ω–∞–¥ –ì–æ–ª—É–±–∏–∫–∞", "–ú–∞–Ω–≥–æ –ú–∞—Ä–∞–∫—É–π—è", "–¶–∏—Ç—Ä—É—Å–æ–≤—ã–π –ú–∏–∫—Å"],
                "image": "https://iimg.su/i/Bkw383"
            }
        },
        "CATSWILL": {
            "CATSWILL Salt 2% 30 ml": {
                "price": 450,
                "flavors": ["–í–∏—à–Ω—è –ü–µ—Ä—Å–∏–∫ –ú—è—Ç–∞", "–ò–º–±–∏—Ä–Ω—ã–π –õ–∏–º–æ–Ω–∞–¥ —Å –ú–∞–ª–∏–Ω–æ–π", "–ö–∏—Å–ª—ã–π –ú–∞–ª–∏–Ω–æ–≤—ã–π –°–∫–∏—Ç–ª—Å", 
                           "–õ–∏–º–æ–Ω–∞–¥ –ï–∂–µ–≤–∏–∫–∞ –°–∏—Ä–æ–ø", "–ú–∞–º–±–∞ –ö–∏—Å–ª–æ–µ –Ø–±–ª–æ–∫–æ –ö–∏–≤–∏", "–°–∫–∏—Ç–ª—Å –∏–∑ –í–∏–Ω–æ–≥—Ä–∞–¥–∞ –ò–∑–∞–±–µ–ª–ª—ã"],
                "image": "https://iimg.su/i/J8MdO8"
            }
        },
        "MAXWELLS": {
            "MAXWELLS Salt 2% 30 ml": {
                "price": 400,
                "flavors": ["–ê–ª—Ç–∞–π", "–Ø–≥–æ–¥–Ω—ã–π –ú–∞—Ä–º–µ–ª–∞–¥", "–ó–µ–ª–µ–Ω—ã–π —á–∞—Å —Å —è–≥–æ–¥–∞–º–∏"],
                "image": "https://iimg.su/i/3ElcUl"
            }
        },
        "Rell": {
            "Rell Green Salt 2% 30 ml": {
                "price": 450,
                "flavors": ["Grapefruit (–ì—Ä–µ–π–ø—Ñ—Ä—É—Ç)", "Nord Ice Nectarine (–°–µ–≤–µ—Ä–Ω—ã–π –ù–µ–∫—Ç–∞—Ä–∏–Ω)", 
                           "Papaya Banana (–ü–∞–ø–∞–π—è —Å –ë–∞–Ω–∞–Ω–æ–º)", "Passion Citrus (–¶–∏—Ç—Ä—É—Å –ú–∞—Ä–∞–∫—É–π—è)",
                           "Pineapple Lemon (–ê–Ω–∞–Ω–∞—Å –õ–∏–º–æ–Ω)", "Tropical Smoothie (–¢—Ä–æ–ø–∏—á–µ—Å–∫–∏–π –°–º—É–∑–∏)"],
                "image": "https://iimg.su/i/0KnwNB"
            },
            "Rell Ultima Salt 2% 30 ml": {
                "price": 600,
                "flavors": ["Jasmine Raspberry (–ñ–∞—Å–º–∏–Ω –ú–∞–ª–∏–Ω–∞)", "Kiwi Guava (–ö–∏–≤–∏ –ì—É–∞–≤–∞)", 
                           "Peach Grape (–ü–µ—Ä—Å–∏–∫ –í–∏–Ω–æ–≥—Ä–∞–¥)", "Peach Tea (–ü–µ—Ä—Å–∏–∫–æ–≤—ã–π —á–∞–π)"],
                "image": "https://iimg.su/i/tZq4Bl"
            }
        }
    },
    "disposables": {
        "HQD": {
            "HQD NEO X 25000 —Ç—è–≥": {
                "price": 1600,
                "flavors": ["–ö–∏–≤–∏ –º–∞—Ä–∞–∫—É–π—è –≥—É–∞–≤–∞", "–ú–∞–ª–∏–Ω–∞ –ª–∏–º–æ–Ω –∞—Ä–±—É–∑"],
                "image": "https://iimg.su/i/nPspGQ"
            },
            "HQD Glaze 12000 —Ç—è–≥": {
                "price": 1350,
                "flavors": ["–í–∏–Ω–æ–≥—Ä–∞–¥ –ú–∞–ª–∏–Ω–∞", "–ß–µ—Ä–Ω–∞—è —Å–º–æ—Ä–æ–¥–∏–Ω–∞", "–ß–µ—Ä–Ω–∏–∫–∞"],
                "image": "https://iimg.su/i/4KJr2t"
            }
        },
        "ELF BAR": {
            "ELF BAR NIC KING 30000 —Ç—è–≥": {
                "price": 1450,
                "flavors": ["–ê—Ä–±—É–∑ –í–∏—à–Ω—è", "–í–∏–Ω–æ–≥—Ä–∞–¥ –ö–ª—é–∫–≤–∞", "–ß–µ—Ä–Ω–∏–∫–∞ –ú–∞–ª–∏–Ω–∞ –ª—ë–¥"],
                "image": "https://iimg.su/i/Q8bqko"
            }
        },
        "LOST MARY": {
            "Lost Mary OS 25000 —Ç—è–≥": {
                "price": 1400,
                "flavors": ["–ê–Ω–∞–Ω–∞—Å –ê–ø–µ–ª—å—Å–∏–Ω", "–í–∏—à–Ω—è –ú–∞–ª–∏–Ω–∞ –õ–∞–π–º", "–ö–∏—Å–ª—ã–π –≤–∏–Ω–æ–≥—Ä–∞–¥ –ª—ë–¥"],
                "image": "https://iimg.su/i/IMFhAh"
            }
        },
        "PLONQ": {
            "Plonq Ultra 12000 —Ç—è–≥": {
                "price": 1850,
                "flavors": ["–í–∏–Ω–æ–≥—Ä–∞–¥", "–ì–æ–ª—É–±–∏–∫–∞ –ú–∞–ª–∏–Ω–∞", "–ö–ª—É–±–Ω–∏–∫–∞ –ú–∞–Ω–≥–æ", "–°–º–æ—Ä–æ–¥–∏–Ω–∞"],
                "image": "https://iimg.su/i/sUggA0"
            },
            "Plonq Roqy L 20000 —Ç—è–≥": {
                "price": 1700,
                "flavors": ["–í–∏—à–Ω—è –ß–µ—Ä–Ω–∏–∫–∞ –ö–ª—é–∫–≤–∞", "–ö–∏—Å–ª–æ–µ –ö–∏–≤–∏ –ú–∞—Ä–∞–∫—É–π—è", "–°–∞–∫—É—Ä–∞ –í–∏–Ω–æ–≥—Ä–∞–¥"],
                "image": "https://iimg.su/i/tMBFds"
            }
        },
        "WAKA": {
            "WAKA Blast 38000 —Ç—è–≥": {
                "price": 1600,
                "flavors": ["–õ–∏–º–æ–Ω –õ–∞–π–º + –ú–µ–Ω—Ç–æ–ª –º–∏–∫—Å"],
                "image": "https://iimg.su/i/DjZBoz"
            }
        },
        "PUFFMI": {
            "PUFFMI TANK 20000 —Ç—è–≥": {
                "price": 1650,
                "flavors": ["Blueberry ice - –ß–µ—Ä–Ω–∏—á–Ω—ã–π –ª—ë–¥", "Pomegranate Lime - –ì—Ä–∞–Ω–∞—Ç –õ–∞–π–º"],
                "image": "https://iimg.su/i/t1ibma"
            }
        },
        "INSTABAR": {
            "Instabar WT 15000 —Ç—è–≥": {
                "price": 800,
                "flavors": ["–°–∞–∫—É—Ä–∞ –í–∏–Ω–æ–≥—Ä–∞–¥", "–ê–Ω–∞–Ω–∞—Å –ö–æ–∫–æ—Å", "–ê—Ä–±—É–∑–Ω—ã–π –ö–æ–∫—Ç–µ–π–ª—å", "–í–∏—à–Ω—è –ü–µ—Ä—Å–∏–∫ –õ–∏–º–æ–Ω"],
                "image": "https://iimg.su/i/53MBuB"
            }
        }
    },
    "accessories": {
        "cartridges": {
            "PLONQ 3ml 0.4 –û–º": {"price": 400, "image": "https://iimg.su/i/L8HJGr"},
            "Vaporesso XROS 3ML 0.4 –û–º": {"price": 250, "image": "https://iimg.su/i/BGCTN4"}
        }
    }
}

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä
def create_keyboard(buttons, rows=2, resize=True):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–Ω–æ–ø–æ–∫"""
    if isinstance(buttons, dict):
        buttons = list(buttons.keys())
    
    keyboard = [buttons[i:i+rows] for i in range(0, len(buttons), rows)]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=resize)

def create_inline_keyboard(buttons):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
    keyboard = [[InlineKeyboardButton(text, callback_data=data)] for text, data in buttons]
    return InlineKeyboardMarkup(keyboard)

# –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def main_menu_keyboard():
    return create_keyboard([
        ["üõí –ö–∞—Ç–∞–ª–æ–≥", "üõçÔ∏è –ö–æ—Ä–∑–∏–Ω–∞"],
        ["üöö –î–æ—Å—Ç–∞–≤–∫–∞", "‚ùì –ü–æ–º–æ—â—å"],
        ["üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã"]
    ])

def catalog_menu_keyboard():
    return create_keyboard([
        ["üíß –ñ–∏–¥–∫–æ—Å—Ç–∏", "üö¨ –û–¥–Ω–æ—Ä–∞–∑–∫–∏"],
        ["üåø –ñ–µ–≤–∞—Ç–µ–ª—å–Ω—ã–π —Ç–∞–±–∞–∫", "üîß –ü–æ–¥-—Å–∏—Å—Ç–µ–º—ã"],
        ["‚öôÔ∏è –ö–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏–µ", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
    ])

def back_keyboard(back_to="–∫–∞—Ç–∞–ª–æ–≥"):
    return create_keyboard([f"‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ {back_to}", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"])

def cart_keyboard():
    return create_keyboard([
        ["‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑", "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–∫–∞–∑"],
        ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∫–∞—Ç–∞–ª–æ–≥", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
    ])

# –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    USER_STATES[user.id] = "main_menu"
    USER_CARTS[user.id] = []

    await update.message.reply_text(
        f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *CloudFM*, {user.first_name}!\n\n"
        "–ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ª—É—á—à–∏–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è –≤–µ–π–ø–∏–Ω–≥–∞ —Å –±—ã—Å—Ç—Ä–æ–π –¥–æ—Å—Ç–∞–≤–∫–æ–π!",
        reply_markup=main_menu_keyboard(),
        parse_mode="Markdown"
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üìñ *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –º–∞–≥–∞–∑–∏–Ω—É CloudFM*\n\n"
        "–í–æ—Ç —á—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å:\n"
        "- üõí *–ö–∞—Ç–∞–ª–æ–≥* - –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–≤–∞—Ä—ã\n"
        "- üõçÔ∏è *–ö–æ—Ä–∑–∏–Ω–∞* - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—à–∏ –∑–∞–∫–∞–∑—ã\n"
        "- üöö *–î–æ—Å—Ç–∞–≤–∫–∞* - —É–∑–Ω–∞—Ç—å —É—Å–ª–æ–≤–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏\n"
        "- üìû *–ö–æ–Ω—Ç–∞–∫—Ç—ã* - —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏",
        parse_mode="Markdown"
    )

async def delivery_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üöö *–£—Å–ª–æ–≤–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏ CloudFM*\n\n"
        "‚Ä¢ *–°–∞–º–æ–≤—ã–≤–æ–∑:* –ê–¥—Ä–µ—Å —É—Ç–æ—á–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–∫–∞–∑–µ\n"
        "‚Ä¢ *–î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –≥–æ—Ä–æ–¥—É:* –ë–µ—Å–ø–ª–∞—Ç–Ω–æ –æ—Ç 1500 ‚ÇΩ\n"
        "‚Ä¢ *–î–æ—Å—Ç–∞–≤–∫–∞ –≤ —Ä–µ–≥–∏–æ–Ω—ã:* –û—Ç 300 ‚ÇΩ (1-3 –¥–Ω—è)\n"
        "‚Ä¢ *–≠–∫—Å–ø—Ä–µ—Å—Å-–¥–æ—Å—Ç–∞–≤–∫–∞:* 500 ‚ÇΩ (2 —á–∞—Å–∞)",
        parse_mode="Markdown"
    )

async def contacts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üìû *–ö–æ–Ω—Ç–∞–∫—Ç—ã –º–∞–≥–∞–∑–∏–Ω–∞ CloudFM*\n\n"
        "‚Ä¢ –¢–µ–ª–µ–≥—Ä–∞–º: @CloudFMMSC\n"
        "‚Ä¢ –ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã: 24/7\n\n"
        "–û–ø—Ç–æ–≤—ã–µ –∑–∞–∫—É–ø–∫–∏: @CloudFMMSC",
        parse_mode="Markdown"
    )

# –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –∫–∞—Ç–∞–ª–æ–≥—É
async def show_catalog(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    USER_STATES[user.id] = "catalog_menu"

    await update.message.reply_text(
        "üõí *–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤:*",
        reply_markup=catalog_menu_keyboard(),
        parse_mode="Markdown"
    )

async def show_category(update: Update, context: ContextTypes.DEFAULT_TYPE, category: str):
    user = update.effective_user
    USER_STATES[user.id] = f"{category}_brands"

    category_name = "–∂–∏–¥–∫–æ—Å—Ç—è–º" if category == "liquids" else "–æ–¥–Ω–æ—Ä–∞–∑–∫–∞–º"
    brands = list(PRODUCTS[category].keys())
    
    await update.message.reply_text(
        f"–í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–µ–Ω–¥:",
        reply_markup=create_keyboard(brands + ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∫–∞—Ç–∞–ª–æ–≥", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"])
    )

async def show_brand_products(update: Update, context: ContextTypes.DEFAULT_TYPE, category: str, brand: str):
    user = update.effective_user
    USER_STATES[user.id] = f"{brand.lower()}_products"

    products = PRODUCTS[category][brand]
    message = f"*{brand} - –¢–æ–≤–∞—Ä—ã:*\n\n" + "\n".join([
        f"‚Ä¢ {name} - {info['price']} ‚ÇΩ"
        for name, info in products.items()
    ])

    await update.message.reply_text(
        message,
        reply_markup=create_keyboard(list(products.keys()) + ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]),
        parse_mode="Markdown"
    )

async def show_accessories(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    USER_STATES[user.id] = "accessories_menu"

    await update.message.reply_text(
        "‚öôÔ∏è *–ö–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏–µ –¥–ª—è –ø–æ–¥-—Å–∏—Å—Ç–µ–º:*\n\n"
        "‚Ä¢ –ö–∞—Ä—Ç—Ä–∏–¥–∂ PLONQ 3ml 0.4 –û–º - 400 ‚ÇΩ\n"
        "‚Ä¢ –ö–∞—Ä—Ç—Ä–∏–¥–∂ Vaporesso XROS 3ML 0.4 –û–º - 250 ‚ÇΩ",
        reply_markup=create_keyboard(["–ö–∞—Ä—Ç—Ä–∏–¥–∂—ã", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∫–∞—Ç–∞–ª–æ–≥", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]),
        parse_mode="Markdown"
    )

# –†–∞–±–æ—Ç–∞ —Å —Ç–æ–≤–∞—Ä–∞–º–∏
async def handle_product_selection(update: Update, context: ContextTypes.DEFAULT_TYPE, product_name: str):
    user = update.effective_user
    user_id = user.id

    # –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞ –≤–æ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö
    product_info = None
    category_type = None
    
    for category in ["liquids", "disposables"]:
        for brand, products in PRODUCTS[category].items():
            if product_name in products:
                product_info = products[product_name]
                category_type = category
                break
        if product_info:
            break

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Å–µ—Å—Å—É–∞—Ä–æ–≤
    if not product_info and product_name in PRODUCTS["accessories"]["cartridges"]:
        product_info = PRODUCTS["accessories"]["cartridges"][product_name]
        category_type = "accessories"

    if not product_info:
        await update.message.reply_text("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ —Å –≤–∫—É—Å–∞–º–∏
    if "flavors" in product_info and product_info["flavors"]:
        USER_CURRENT_SELECTION[user_id] = {
            "product_name": product_name,
            "price": product_info["price"],
            "flavors": product_info["flavors"],
            "image": product_info.get("image")
        }
        USER_STATES[user_id] = f"waiting_flavor_{product_name}"

        flavors_text = "\n".join([f"{i+1}. {flavor}" for i, flavor in enumerate(product_info["flavors"])])
        message = f"üéØ *{product_name}* - *{product_info['price']} ‚ÇΩ*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∫—É—Å:\n\n{flavors_text}"

        if product_info.get("image"):
            await update.message.reply_photo(
                photo=product_info["image"],
                caption=message,
                parse_mode="Markdown"
            )
        else:
            await update.message.reply_text(message, parse_mode="Markdown")
    else:
        # –¢–æ–≤–∞—Ä—ã –±–µ–∑ –≤–∫—É—Å–æ–≤ (–∞–∫—Å–µ—Å—Å—É–∞—Ä—ã)
        add_to_cart(user_id, product_name, product_info["price"])
        
        message = f"‚úÖ *{product_name}* - *{product_info['price']} ‚ÇΩ* –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!"
        if product_info.get("image"):
            await update.message.reply_photo(
                photo=product_info["image"],
                caption=message,
                parse_mode="Markdown"
            )
        else:
            await update.message.reply_text(message, parse_mode="Markdown")

# –†–∞–±–æ—Ç–∞ —Å –∫–æ—Ä–∑–∏–Ω–æ–π
def add_to_cart(user_id, product_name, price, flavor=None):
    if user_id not in USER_CARTS:
        USER_CARTS[user_id] = []

    item_name = f"{product_name} - {flavor}" if flavor else product_name

    for item in USER_CARTS[user_id]:
        if item['name'] == item_name:
            item['quantity'] += 1
            return

    USER_CARTS[user_id].append({
        'name': item_name,
        'price': price,
        'quantity': 1
    })

async def show_cart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_id = user.id
    USER_STATES[user_id] = "cart"

    cart = USER_CARTS.get(user_id, [])
    if not cart:
        await update.message.reply_text("üõçÔ∏è *–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞*", parse_mode="Markdown")
        return

    cart_text = "üõçÔ∏è *–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞*\n\n"
    total = 0
    for i, item in enumerate(cart, 1):
        item_total = item['price'] * item['quantity']
        cart_text += f"{i}. {item['name']} - {item['quantity']} —à—Ç. = {item_total} ‚ÇΩ\n"
        total += item_total

    cart_text += f"\nüíµ *–ò—Ç–æ–≥–æ: {total} ‚ÇΩ*"

    await update.message.reply_text(cart_text, reply_markup=cart_keyboard(), parse_mode="Markdown")

async def send_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    cart = USER_CARTS.get(user.id, [])

    if not cart:
        await update.message.reply_text("‚ùå –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!")
        return

    order_text = f"üõí *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!*\n\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.first_name}\nüÜî ID: {user.id}\n\nüìù *–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:*\n"
    total = 0
    
    for item in cart:
        item_total = item['price'] * item['quantity']
        order_text += f"- {item['name']} - {item['quantity']} —à—Ç. = {item_total} ‚ÇΩ\n"
        total += item_total

    order_text += f"\nüíµ *–ò—Ç–æ–≥–æ: {total} ‚ÇΩ*"

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–¥–º–∏–Ω–∞–º
    for admin_id in ADMIN_IDS:
        try:
            await context.bot.send_message(admin_id, order_text, parse_mode="Markdown")
        except Exception as e:
            logger.error(f"Error sending order to admin {admin_id}: {e}")

    await update.message.reply_text(
        "‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω! –°–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –æ–ø–µ—Ä–∞—Ç–æ—Ä.",
        reply_markup=main_menu_keyboard()
    )
    USER_CARTS[user.id] = []

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    user = update.effective_user
    user_id = user.id
    state = USER_STATES.get(user_id, "main_menu")

    # –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    nav_commands = {
        "üõí –∫–∞—Ç–∞–ª–æ–≥": show_catalog,
        "üõçÔ∏è –∫–æ—Ä–∑–∏–Ω–∞": show_cart,
        "üöö –¥–æ—Å—Ç–∞–≤–∫–∞": delivery_info,
        "‚ùì –ø–æ–º–æ—â—å": help_command,
        "üìû –∫–æ–Ω—Ç–∞–∫—Ç—ã": contacts,
        "üè† –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é": lambda u, c: u.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu_keyboard()),
        "‚¨ÖÔ∏è –Ω–∞–∑–∞–¥ –≤ –∫–∞—Ç–∞–ª–æ–≥": show_catalog,
        "üíß –∂–∏–¥–∫–æ—Å—Ç–∏": lambda u, c: show_category(u, c, "liquids"),
        "üö¨ –æ–¥–Ω–æ—Ä–∞–∑–∫–∏": lambda u, c: show_category(u, c, "disposables"),
        "‚öôÔ∏è –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏–µ": show_accessories
    }

    if text.lower() in nav_commands:
        await nav_commands[text.lower()](update, context)
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    if state == "main_menu":
        if text == "üõí –ö–∞—Ç–∞–ª–æ–≥":
            await show_catalog(update, context)

    elif state == "catalog_menu":
        if text == "üíß –ñ–∏–¥–∫–æ—Å—Ç–∏":
            await show_category(update, context, "liquids")
        elif text == "üö¨ –û–¥–Ω–æ—Ä–∞–∑–∫–∏":
            await show_category(update, context, "disposables")
        elif text == "‚öôÔ∏è –ö–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏–µ":
            await show_accessories(update, context)

    elif state.endswith("_brands"):
        category = state.replace("_brands", "")
        if text in PRODUCTS.get(category, {}):
            await show_brand_products(update, context, category, text)
        elif text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
            await show_catalog(update, context)

    elif state.endswith("_products"):
        brand = state.replace("_products", "").upper()
        for category in ["liquids", "disposables"]:
            if brand in PRODUCTS[category]:
                if text in PRODUCTS[category][brand]:
                    await handle_product_selection(update, context, text)
                    return
        if text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
            await show_category(update, context, "liquids" if brand in PRODUCTS["liquids"] else "disposables")

    elif state.startswith("waiting_flavor_"):
        if text.isdigit():
            flavor_index = int(text) - 1
            selection = USER_CURRENT_SELECTION.get(user_id, {})
            flavors = selection.get("flavors", [])
            
            if 0 <= flavor_index < len(flavors):
                add_to_cart(user_id, selection["product_name"], selection["price"], flavors[flavor_index])
                await update.message.reply_text(f"‚úÖ {selection['product_name']} - {flavors[flavor_index]} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!")
                USER_STATES[user_id] = "main_menu"
            else:
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –≤–∫—É—Å–∞")
        else:
            await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∫—É—Å–∞")

    elif state == "cart":
        if text == "‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑":
            await send_order(update, context)
        elif text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–∫–∞–∑":
            await update.message.reply_text("‚úèÔ∏è –î–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –Ω–æ–º–µ—Ä:")

    elif state == "accessories_menu":
        if text == "–ö–∞—Ä—Ç—Ä–∏–¥–∂—ã":
            products = PRODUCTS["accessories"]["cartridges"]
            message = "üîß *–ö–∞—Ä—Ç—Ä–∏–¥–∂—ã:*\n\n" + "\n".join([
                f"‚Ä¢ {name} - {info['price']} ‚ÇΩ" for name, info in products.items()
            ])
            await update.message.reply_text(message, parse_mode="Markdown")
        elif text in PRODUCTS["accessories"]["cartridges"]:
            await handle_product_selection(update, context, text)

    else:
        await update.message.reply_text("‚ùå –ù–µ–ø–æ–Ω—è—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫
async def handle_callback_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("–û–±—Ä–∞–±–æ—Ç–∫–∞...")

def main():
    application = Application.builder().token(TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(CallbackQueryHandler(handle_callback_query))
    
    logger.info("–ë–æ—Ç CloudFM –∑–∞–ø—É—â–µ–Ω")
    application.run_polling()

if __name__ == '__main__':
    main()
