import logging
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
    CallbackContext,
    CallbackQueryHandler
)


# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å –≤–∞—à–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
TOKEN = "8013532862:AAGG6ywOEfm7s6XgFJPBevxjIjmW_cZ8wZE"
ADMIN_IDS = [711876728, 789800147]
ADMIN_USERNAME = "@malovat21"

# –°–ª–æ–≤–∞—Ä—å —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏ —Ç–æ–≤–∞—Ä–æ–≤
PRODUCT_PHOTOS = {
    "HQD NEO X 25000 —Ç—è–≥": "https://iimg.su/i/nPspGQ",
    "HQD Glaze 12000 —Ç—è–≥": "https://iimg.su/i/4KJr2t",
    "ELF BAR NIC KING 30000 —Ç—è–≥": "https://iimg.su/i/Q8bqko",
    "Lost Mary OS 25000 —Ç—è–≥": "https://iimg.su/i/IMFhAh",
    "Plonq Ultra 12000 —Ç—è–≥": "https://iimg.su/i/sUggA0",
    "Plonq Roqy L 20000 —Ç—è–≥": "https://iimg.su/i/tMBFds",
    "WAKA Blast 38000 —Ç—è–≥": "https://iimg.su/i/DjZBoz",
    "PUFFMI TANK 20000 —Ç—è–≥": "https://iimg.su/i/t1ibma",
    "Instabar WT 15000 —Ç—è–≥": "https://iimg.su/i/53MBuB",
    "HUSKY IMPORT MALAYSIAN SALT (20MG) 30 ml": "https://iimg.su/i/QxOz3w",
    "PODONKI ARCADE Salt 2% 30 ml": "https://iimg.su/i/Bkw383",
    "CATSWILL Salt 2% 30 ml": "https://iimg.su/i/J8MdO8",
    "MAXWELLS Salt 2% 30 ml": "https://iimg.su/i/3ElcUl",
    "Rell Green Salt 2% 30 ml": "https://iimg.su/i/0KnwNB",
    "Rell Ultima Salt 2% 30 ml": "https://iimg.su/i/tZq4Bl",
    "–ö–∞—Ä—Ç—Ä–∏–¥–∂ PLONQ 3ml 0.4 –û–º": "https://iimg.su/i/L8HJGr",
    "–ö–∞—Ä—Ç—Ä–∏–¥–∂ Vaporesso XROS 3ML 0.4 –û–º": "https://iimg.su/i/BGCTN4"
}


# –°–æ–∑–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–æ–≥–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π UTF-8
class Utf8FileHandler(logging.FileHandler):
    def __init__(self, filename, mode='a', encoding='utf-8', delay=False):
        super().__init__(filename, mode, encoding, delay)


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ñ–∞–π–ª–∞ —Å UTF-8
file_handler = Utf8FileHandler("bot.log")
file_handler.setFormatter(logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s'))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
console_handler = logging.StreamHandler()
console_handler.setFormatter(logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s'))

logger.addHandler(file_handler)
logger.addHandler(console_handler)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
USER_STATES = {}
USER_CARTS = {}
USER_CURRENT_PRODUCT = {}
USER_CURRENT_FLAVORS = {}

# –°–ª–æ–≤–∞—Ä–∏ —Å –≤–∫—É—Å–∞–º–∏
DISPOSABLE_FLAVORS = {
    "HQD NEO X 25000 —Ç—è–≥": [
        "–ö–∏–≤–∏ –º–∞—Ä–∞–∫—É–π—è –≥—É–∞–≤–∞",
        "–ú–∞–ª–∏–Ω–∞ –ª–∏–º–æ–Ω –∞—Ä–±—É–∑"
    ],
    "HQD Glaze 12000 —Ç—è–≥": [
        "–í–∏–Ω–æ–≥—Ä–∞–¥ –ú–∞–ª–∏–Ω–∞",
        "–ß–µ—Ä–Ω–∞—è —Å–º–æ—Ä–æ–¥–∏–Ω–∞",
        "–ß–µ—Ä–Ω–∏–∫–∞"
    ],
    "ELF BAR NIC KING 30000 —Ç—è–≥": [
        "–ê—Ä–±—É–∑ –í–∏—à–Ω—è",
        "–í–∏–Ω–æ–≥—Ä–∞–¥ –ö–ª—é–∫–≤–∞", 
        "–ß–µ—Ä–Ω–∏–∫–∞ –ú–∞–ª–∏–Ω–∞ –ª—ë–¥"
    ],
    "Lost Mary OS 25000 —Ç—è–≥": [
        "–ê–Ω–∞–Ω–∞—Å –ê–ø–µ–ª—å—Å–∏–Ω",
        "–í–∏—à–Ω—è –ú–∞–ª–∏–Ω–∞ –õ–∞–π–º",
        "–ö–∏—Å–ª—ã–π –≤–∏–Ω–æ–≥—Ä–∞–¥ –ª—ë–¥"
    ],
    "Plonq Ultra 12000 —Ç—è–≥": [
        "–í–∏–Ω–æ–≥—Ä–∞–¥",
        "–ì–æ–ª—É–±–∏–∫–∞ –ú–∞–ª–∏–Ω–∞",
        "–ö–ª—É–±–Ω–∏–∫–∞ –ú–∞–Ω–≥–æ",
        "–°–º–æ—Ä–æ–¥–∏–Ω–∞"
    ],
    "Plonq Roqy L 20000 —Ç—è–≥": [
        "–í–∏—à–Ω—è –ß–µ—Ä–Ω–∏–∫–∞ –ö–ª—é–∫–≤–∞",
        "–ö–∏—Å–ª–æ–µ –ö–∏–≤–∏ –ú–∞—Ä–∞–∫—É–π—è",
        "–°–∞–∫—É—Ä–∞ –í–∏–Ω–æ–≥—Ä–∞–¥"
    ],
    "PUFFMI TANK 20000 —Ç—è–≥": [
        "Blueberry ice - –ß–µ—Ä–Ω–∏—á–Ω—ã–π –ª—ë–¥",
        "Pomegranate Lime - –ì—Ä–∞–Ω–∞—Ç –õ–∞–π–º"
    ],
    "Instabar WT 15000 —Ç—è–≥": [
        "–°–∞–∫—É—Ä–∞ –í–∏–Ω–æ–≥—Ä–∞–¥",
        "–ê–Ω–∞–Ω–∞—Å –ö–æ–∫–æ—Å",
        "–ê—Ä–±—É–∑–Ω—ã–π –ö–æ–∫—Ç–µ–π–ª—å",
        "–í–∏—à–Ω—è –ü–µ—Ä—Å–∏–∫ –õ–∏–º–æ–Ω"
    ],
    "WAKA Blast 38000 —Ç—è–≥": [
        "–õ–∏–º–æ–Ω –õ–∞–π–º + –ú–µ–Ω—Ç–æ–ª –º–∏–∫—Å"
    ]
}

LIQUID_FLAVORS = {
    "HUSKY IMPORT MALAYSIAN SALT (20MG) 30 ml": [
        "Gum Wolf (–ê—Ä–±—É–∑–Ω–∞—è –∂–≤–∞—á–∫–∞)",
        "Sour Beast (–ö–∏–≤–∏, –∫–ª—É–±–Ω–∏–∫–∞ –∏ –ø–µ—Ä–µ—á–Ω–∞—è –º—è—Ç–∞)"
    ],
    "PODONKI ARCADE Salt 2% 30 ml": [
        "–í–∏–Ω–æ–≥—Ä–∞–¥ –ï–∂–µ–≤–∏–∫–∞",
        "–í–∏—à–Ω–µ–≤—ã–π —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫", 
        "–õ–∏–º–æ–Ω–∞–¥ –ì–æ–ª—É–±–∏–∫–∞",
        "–ú–∞–Ω–≥–æ –ú–∞—Ä–∞–∫—É–π—è",
        "–¶–∏—Ç—Ä—É—Å–æ–≤—ã–π –ú–∏–∫—Å"
    ],
    "CATSWILL Salt 2% 30 ml": [
        "–í–∏—à–Ω—è –ü–µ—Ä—Å–∏–∫ –ú—è—Ç–∞",
        "–ò–º–±–∏—Ä–Ω—ã–π –õ–∏–º–æ–Ω–∞–¥ —Å –ú–∞–ª–∏–Ω–æ–π",
        "–ö–∏—Å–ª—ã–π –ú–∞–ª–∏–Ω–æ–≤—ã–π –°–∫–∏—Ç–ª—Å",
        "–õ–∏–º–æ–Ω–∞–¥ –ï–∂–µ–≤–∏–∫–∞ –°–∏—Ä–æ–ø",
        "–ú–∞–º–±–∞ –ö–∏—Å–ª–æ–µ –Ø–±–ª–æ–∫–æ –ö–∏–≤–∏",
        "–°–∫–∏—Ç–ª—Å –∏–∑ –í–∏–Ω–æ–≥—Ä–∞–¥–∞ –ò–∑–∞–±–µ–ª–ª—ã"
    ],
    "MAXWELLS Salt 2% 30 ml": [
        "–ê–ª—Ç–∞–π",
        "–Ø–≥–æ–¥–Ω—ã–π –ú–∞—Ä–º–µ–ª–∞–¥", 
        "–ó–µ–ª–µ–Ω—ã–π —á–∞–π —Å —è–≥–æ–¥–∞–º–∏"
    ],
    "Rell Green Salt 2% 30 ml": [
        "Grapefruit (–ì—Ä–µ–π–ø—Ñ—Ä—É—Ç)",
        "Nord Ice Nectarine (–°–µ–≤–µ—Ä–Ω—ã–π –ù–µ–∫—Ç–∞—Ä–∏–Ω)",
        "Papaya Banana (–ü–∞–ø–∞–π—è —Å –ë–∞–Ω–∞–Ω–æ–º)",
        "Passion Citrus (–¶–∏—Ç—Ä—É—Å –ú–∞—Ä–∞–∫—É–π—è)",
        "Pineapple Lemon (–ê–Ω–∞–Ω–∞—Å –õ–∏–º–æ–Ω)",
        "Tropical Smoothie (–¢—Ä–æ–ø–∏—á–µ—Å–∫–∏–π –°–º—É–∑–∏)"
    ],
    "Rell Ultima Salt 2% 30 ml": [
        "Jasmine Raspberry (–ñ–∞—Å–º–∏–Ω –ú–∞–ª–∏–Ω–∞)",
        "Kiwi Guava (–ö–∏–≤–∏ –ì—É–∞–≤–∞)",
        "Peach Grape (–ü–µ—Ä—Å–∏–∫ –í–∏–Ω–æ–≥—Ä–∞–¥)",
        "Peach Tea (–ü–µ—Ä—Å–∏–∫–æ–≤—ã–π —á–∞–π)"
    ]
}

# ---- –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã ----

def main_menu_keyboard():
    return ReplyKeyboardMarkup([
        ["üõí –ö–∞—Ç–∞–ª–æ–≥", "üõçÔ∏è –ö–æ—Ä–∑–∏–Ω–∞"],
        ["üöö –î–æ—Å—Ç–∞–≤–∫–∞", "‚ùì –ü–æ–º–æ—â—å"],
        ["üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã"]
    ], resize_keyboard=True)


def catalog_menu_keyboard():
    return ReplyKeyboardMarkup([
        ["üíß –ñ–∏–¥–∫–æ—Å—Ç–∏", "üö¨ –û–¥–Ω–æ—Ä–∞–∑–∫–∏"],
        ["üåø –ñ–µ–≤–∞—Ç–µ–ª—å–Ω—ã–π —Ç–∞–±–∞–∫", "üîß –ü–æ–¥-—Å–∏—Å—Ç–µ–º—ã"],
        ["‚öôÔ∏è –ö–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏–µ –¥–ª—è –ø–æ–¥-—Å–∏—Å—Ç–µ–º"],
        ["üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
    ], resize_keyboard=True)


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∂–∏–¥–∫–æ—Å—Ç–µ–π
def liquids_brands_keyboard():
    return ReplyKeyboardMarkup([
        ["HUSKY", "PODONKI", "CATSWILL"],
        ["MAXWELLS", "Rell"],
        ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∫–∞—Ç–∞–ª–æ–≥", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
    ], resize_keyboard=True)


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ HUSKY
def husky_products_keyboard():
    return ReplyKeyboardMarkup([
        ["HUSKY IMPORT MALAYSIAN SALT (20MG) 30 ml"],
        ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∂–∏–¥–∫–æ—Å—Ç—è–º", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
    ], resize_keyboard=True)


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ PODONKI
def podonki_products_keyboard():
    return ReplyKeyboardMarkup([
        ["PODONKI ARCADE Salt 2% 30 ml"],
        ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∂–∏–¥–∫–æ—Å—Ç—è–º", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
    ], resize_keyboard=True)


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ CATSWILL
def catswill_products_keyboard():
    return ReplyKeyboardMarkup([
        ["CATSWILL Salt 2% 30 ml"],
        ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∂–∏–¥–∫–æ—Å—Ç—è–º", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
    ], resize_keyboard=True)


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ MAXWELLS
def maxwells_products_keyboard():
    return ReplyKeyboardMarkup([
        ["MAXWELLS Salt 2% 30 ml"],
        ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∂–∏–¥–∫–æ—Å—Ç—è–º", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
    ], resize_keyboard=True)


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ Rell
def rell_products_keyboard():
    return ReplyKeyboardMarkup([
        ["Rell Green Salt 2% 30 ml", "Rell Ultima Salt 2% 30 ml"],
        ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∂–∏–¥–∫–æ—Å—Ç—è–º", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
    ], resize_keyboard=True)


# –û–ë–ù–û–í–õ–ï–ù–û: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ–¥–Ω–æ—Ä–∞–∑–æ–∫ —Å –Ω–æ–≤—ã–º–∏ –±—Ä–µ–Ω–¥–∞–º–∏
def disposable_brands_keyboard():
    return ReplyKeyboardMarkup([
        ["HQD", "ELF BAR", "LOST MARY"],
        ["PLONQ", "WAKA", "PUFFMI"],
        ["INSTABAR"],
        ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∫–∞—Ç–∞–ª–æ–≥", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
    ], resize_keyboard=True)


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ HQD
def hqd_products_keyboard():
    return ReplyKeyboardMarkup([
        ["HQD NEO X 25000 —Ç—è–≥", "HQD Glaze 12000 —Ç—è–≥"],
        ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –æ–¥–Ω–æ—Ä–∞–∑–∫–∞–º", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
    ], resize_keyboard=True)


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ ELF BAR
def elfbar_products_keyboard():
    return ReplyKeyboardMarkup([
        ["ELF BAR NIC KING 30000 —Ç—è–≥"],
        ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –æ–¥–Ω–æ—Ä–∞–∑–∫–∞–º", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
    ], resize_keyboard=True)


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ LOST MARY
def lostmary_products_keyboard():
    return ReplyKeyboardMarkup([
        ["Lost Mary OS 25000 —Ç—è–≥"],
        ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –æ–¥–Ω–æ—Ä–∞–∑–∫–∞–º", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
    ], resize_keyboard=True)


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ PLONQ
def plonq_products_keyboard():
    return ReplyKeyboardMarkup([
        ["Plonq Ultra 12000 —Ç—è–≥", "Plonq Roqy L 20000 —Ç—è–≥"],
        ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –æ–¥–Ω–æ—Ä–∞–∑–∫–∞–º", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
    ], resize_keyboard=True)


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ WAKA
def waka_products_keyboard():
    return ReplyKeyboardMarkup([
        ["WAKA Blast 38000 —Ç—è–≥"],
        ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –æ–¥–Ω–æ—Ä–∞–∑–∫–∞–º", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
    ], resize_keyboard=True)


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ PUFFMI
def puffmi_products_keyboard():
    return ReplyKeyboardMarkup([
        ["PUFFMI TANK 20000 —Ç—è–≥"],
        ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –æ–¥–Ω–æ—Ä–∞–∑–∫–∞–º", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
    ], resize_keyboard=True)


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ INSTABAR
def instabar_products_keyboard():
    return ReplyKeyboardMarkup([
        ["Instabar WT 15000 —Ç—è–≥"],
        ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –æ–¥–Ω–æ—Ä–∞–∑–∫–∞–º", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
    ], resize_keyboard=True)


# –ò–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É
def add_to_cart_keyboard(product_id):
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data=f"add_{product_id}")],
        [InlineKeyboardButton("üõí –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data="go_to_cart")]
    ])


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–∫—É—Å–∞
def flavor_selection_keyboard():
    return ReplyKeyboardMarkup([
        ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ–¥—É–∫—Ç—É", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
    ], resize_keyboard=True)


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å–Ω—é—Å–∞
def snus_brands_keyboard():
    return ReplyKeyboardMarkup([
        ["FAFF", "ICEBERG", "LYFT"],
        ["ARQA", "BLAX", "CORVUS"],
        ["KASTA"],
        ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∫–∞—Ç–∞–ª–æ–≥", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
    ], resize_keyboard=True)


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥-—Å–∏—Å—Ç–µ–º
def pod_systems_keyboard():
    return ReplyKeyboardMarkup([
        ["Geek Vape", "Vaporesso"],
        ["Smoant", "Voopoo"],
        ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∫–∞—Ç–∞–ª–æ–≥", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
    ], resize_keyboard=True)


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏—Ö
def pod_accessories_keyboard():
    return ReplyKeyboardMarkup([
        ["–ò—Å–ø–∞—Ä–∏—Ç–µ–ª–∏", "–ö–∞—Ä—Ç—Ä–∏–¥–∂—ã"],
        ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∫–∞—Ç–∞–ª–æ–≥", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
    ], resize_keyboard=True)


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∫–∞—Ä—Ç—Ä–∏–¥–∂–µ–π
def cartridges_keyboard():
    return ReplyKeyboardMarkup([
        ["PLONQ 3ml 0.4 –û–º", "Vaporesso XROS 3ML 0.4 –û–º"],
        ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏–º", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
    ], resize_keyboard=True)


def back_to_catalog_keyboard():
    return ReplyKeyboardMarkup([
        ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∫–∞—Ç–∞–ª–æ–≥", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
    ], resize_keyboard=True)


def cart_keyboard():
    return ReplyKeyboardMarkup([
        ["‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑", "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–∫–∞–∑"],
        ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∫–∞—Ç–∞–ª–æ–≥", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
    ], resize_keyboard=True)


# ---- –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–∞–≥–∞–∑–∏–Ω–∞ ----

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    USER_STATES[user.id] = "main_menu"
    USER_CARTS[user.id] = []

    await update.message.reply_text(
        f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *CloudFM*, {user.first_name}!\n\n"
        "–ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ª—É—á—à–∏–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è –≤–µ–π–ø–∏–Ω–≥–∞ —Å –±—ã—Å—Ç—Ä–æ–π –¥–æ—Å—Ç–∞–≤–∫–æ–π!\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ:",
        reply_markup=main_menu_keyboard(),
        parse_mode="Markdown"
    )
    logger.info(f"User {user.id} started the bot")


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        "üìñ *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –º–∞–≥–∞–∑–∏–Ω—É CloudFM*\n\n"
        "–í–æ—Ç —á—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å:\n"
        "- üõí *–ö–∞—Ç–∞–ª–æ–≥* - –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–≤–∞—Ä—ã\n"
        "- üõçÔ∏è *–ö–æ—Ä–∑–∏–Ω–∞* - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—à–∏ –∑–∞–∫–∞–∑—ã\n"
        "- üöö *–î–æ—Å—Ç–∞–≤–∫–∞* - —É–∑–Ω–∞—Ç—å —É—Å–ª–æ–≤–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏\n"
        "- üìû *–ö–æ–Ω—Ç–∞–∫—Ç—ã* - —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏\n"
        "- /start - –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        parse_mode="Markdown"
    )


async def show_catalog(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    USER_STATES[user.id] = "catalog_menu"

    await update.message.reply_text(
        "üõí *–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—É —Ç–æ–≤–∞—Ä–æ–≤:*\n\n"
        "‚Ä¢ üíß –ñ–∏–¥–∫–æ—Å—Ç–∏ –¥–ª—è —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã—Ö —Å–∏–≥–∞—Ä–µ—Ç\n"
        "‚Ä¢ üö¨ –û–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–µ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ —Å–∏–≥–∞—Ä–µ—Ç—ã\n"
        "‚Ä¢ üåø –ñ–µ–≤–∞—Ç–µ–ª—å–Ω—ã–π —Ç–∞–±–∞–∫\n"
        "‚Ä¢ üîß –ü–æ–¥-—Å–∏—Å—Ç–µ–º—ã (POD-—Å–∏—Å—Ç–µ–º—ã)\n"
        "‚Ä¢ ‚öôÔ∏è –ö–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏–µ –¥–ª—è –ø–æ–¥-—Å–∏—Å—Ç–µ–º\n",
        reply_markup=catalog_menu_keyboard(),
        parse_mode="Markdown"
    )


async def show_liquids(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    USER_STATES[user.id] = "liquids_brands"

    await update.message.reply_text(
        "üíß *–í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–µ–Ω–¥ –∂–∏–¥–∫–æ—Å—Ç–∏:*",
        reply_markup=liquids_brands_keyboard(),
        parse_mode="Markdown"
    )


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–¥–Ω–æ—Ä–∞–∑–æ–∫
async def show_disposable(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    USER_STATES[user.id] = "disposable_brands"

    await update.message.reply_text(
        "üö¨ *–û–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–µ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ —Å–∏–≥–∞—Ä–µ—Ç—ã:*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–µ–Ω–¥:",
        reply_markup=disposable_brands_keyboard(),
        parse_mode="Markdown"
    )


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ç–æ–≤–∞—Ä–æ–≤ HUSKY
async def show_husky_products(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    USER_STATES[user.id] = "husky_products"

    await update.message.reply_text(
        "üíß *–¢–æ–≤–∞—Ä—ã HUSKY:*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç:",
        reply_markup=husky_products_keyboard(),
        parse_mode="Markdown"
    )


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ç–æ–≤–∞—Ä–æ–≤ PODONKI
async def show_podonki_products(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    USER_STATES[user.id] = "podonki_products"

    await update.message.reply_text(
        "üíß *–¢–æ–≤–∞—Ä—ã PODONKI:*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç:",
        reply_markup=podonki_products_keyboard(),
        parse_mode="Markdown"
    )


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ç–æ–≤–∞—Ä–æ–≤ CATSWILL
async def show_catswill_products(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    USER_STATES[user.id] = "catswill_products"

    await update.message.reply_text(
        "üíß *–¢–æ–≤–∞—Ä—ã CATSWILL:*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç:",
        reply_markup=catswill_products_keyboard(),
        parse_mode="Markdown"
    )


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ç–æ–≤–∞—Ä–æ–≤ MAXWELLS
async def show_maxwells_products(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    USER_STATES[user.id] = "maxwells_products"

    await update.message.reply_text(
        "üíß *–¢–æ–≤–∞—Ä—ã MAXWELLS:*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç:",
        reply_markup=maxwells_products_keyboard(),
        parse_mode="Markdown"
    )


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ç–æ–≤–∞—Ä–æ–≤ Rell
async def show_rell_products(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    USER_STATES[user.id] = "rell_products"

    await update.message.reply_text(
        "üíß *–¢–æ–≤–∞—Ä—ã Rell:*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç:",
        reply_markup=rell_products_keyboard(),
        parse_mode="Markdown"
    )


# –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –û–î–ù–û–†–ê–ó–û–ö

async def show_hqd_products(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    USER_STATES[user.id] = "hqd_products"

    await update.message.reply_text(
        "üö¨ *–¢–æ–≤–∞—Ä—ã HQD:*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç:",
        reply_markup=hqd_products_keyboard(),
        parse_mode="Markdown"
    )


async def show_elfbar_products(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    USER_STATES[user.id] = "elfbar_products"

    await update.message.reply_text(
        "üö¨ *–¢–æ–≤–∞—Ä—ã ELF BAR:*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç:",
        reply_markup=elfbar_products_keyboard(),
        parse_mode="Markdown"
    )


async def show_lostmary_products(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    USER_STATES[user.id] = "lostmary_products"

    await update.message.reply_text(
        "üö¨ *–¢–æ–≤–∞—Ä—ã LOST MARY:*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç:",
        reply_markup=lostmary_products_keyboard(),
        parse_mode="Markdown"
    )


async def show_plonq_products(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    USER_STATES[user.id] = "plonq_products"

    await update.message.reply_text(
        "üö¨ *–¢–æ–≤–∞—Ä—ã PLONQ:*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç:",
        reply_markup=plonq_products_keyboard(),
        parse_mode="Markdown"
    )


async def show_waka_products(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    USER_STATES[user.id] = "waka_products"

    await update.message.reply_text(
        "üö¨ *–¢–æ–≤–∞—Ä—ã WAKA:*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç:",
        reply_markup=waka_products_keyboard(),
        parse_mode="Markdown"
    )


async def show_puffmi_products(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    USER_STATES[user.id] = "puffmi_products"

    await update.message.reply_text(
        "üö¨ *–¢–æ–≤–∞—Ä—ã PUFFMI:*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç:",
        reply_markup=puffmi_products_keyboard(),
        parse_mode="Markdown"
    )


async def show_instabar_products(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    USER_STATES[user.id] = "instabar_products"

    await update.message.reply_text(
        "üö¨ *–¢–æ–≤–∞—Ä—ã INSTABAR:*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç:",
        reply_markup=instabar_products_keyboard(),
        parse_mode="Markdown"
    )


async def show_snus(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    USER_STATES[user.id] = "snus_brands"

    await update.message.reply_text(
        "üåø *–ñ–µ–≤–∞—Ç–µ–ª—å–Ω—ã–π —Ç–∞–±–∞–∫:*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–µ–Ω–¥:",
        reply_markup=snus_brands_keyboard(),
        parse_mode="Markdown"
    )


async def show_pod_systems(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    USER_STATES[user.id] = "pod_systems"

    await update.message.reply_text(
        "üîß *–ü–æ–¥-—Å–∏—Å—Ç–µ–º—ã:*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–µ–Ω–¥:",
        reply_markup=pod_systems_keyboard(),
        parse_mode="Markdown"
    )


async def show_pod_accessories(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    USER_STATES[user.id] = "pod_accessories"

    await update.message.reply_text(
        "‚öôÔ∏è *–ö–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏–µ –¥–ª—è –ø–æ–¥-—Å–∏—Å—Ç–µ–º:*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø:",
        reply_markup=pod_accessories_keyboard(),
        parse_mode="Markdown"
    )


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –∫–∞—Ä—Ç—Ä–∏–¥–∂–µ–π
async def show_cartridges(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    USER_STATES[user.id] = "cartridges"

    await update.message.reply_text(
        "üîß *–ö–∞—Ä—Ç—Ä–∏–¥–∂—ã –¥–ª—è –ø–æ–¥-—Å–∏—Å—Ç–µ–º:*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç:",
        reply_markup=cartridges_keyboard(),
        parse_mode="Markdown"
    )


async def back_to_liquids(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await show_liquids(update, context)


async def back_to_disposable(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await show_disposable(update, context)


async def back_to_accessories(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await show_pod_accessories(update, context)


async def back_to_catalog(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await show_catalog(update, context)


async def back_to_main(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    USER_STATES[user.id] = "main_menu"

    await update.message.reply_text(
        "üè† –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=main_menu_keyboard()
    )


async def show_cart(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    cart = USER_CARTS.get(user.id, [])
    USER_STATES[user.id] = "cart"

    cart_text = "üõçÔ∏è *–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞*\n\n"
    if not cart:
        cart_text += "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞"
    else:
        total = 0
        for i, item in enumerate(cart, 1):
            cart_text += f"{i}. {item['name']} - {item['quantity']} —à—Ç. ({item['price']} ‚ÇΩ)\n"
            total += item['price'] * item['quantity']
        cart_text += f"\n–ò—Ç–æ–≥–æ: *{total} ‚ÇΩ*\n"

    await update.message.reply_text(
        cart_text,
        reply_markup=cart_keyboard(),
        parse_mode="Markdown"
    )


async def delivery_info(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    info = (
        "üöö *–£—Å–ª–æ–≤–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏ CloudFM*\n\n"
        "‚Ä¢ *–°–∞–º–æ–≤—ã–≤–æ–∑:* –ê–¥—Ä–µ—Å —É—Ç–æ—á–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–∫–∞–∑–µ (–ü–Ω-–í—Å 10:00-22:00)\n"
        "‚Ä¢ *–î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –≥–æ—Ä–æ–¥—É:* –ë–µ—Å–ø–ª–∞—Ç–Ω–æ –ø—Ä–∏ –∑–∞–∫–∞–∑–µ –æ—Ç 1500 ‚ÇΩ\n"
        "‚Ä¢ *–î–æ—Å—Ç–∞–≤–∫–∞ –≤ —Ä–µ–≥–∏–æ–Ω—ã:* –û—Ç 300 ‚ÇΩ (—Å—Ä–æ–∫ 1-3 –¥–Ω—è)\n"
        "‚Ä¢ *–≠–∫—Å–ø—Ä–µ—Å—Å-–¥–æ—Å—Ç–∞–≤–∫–∞:* 500 ‚ÇΩ (–≤ —Ç–µ—á–µ–Ω–∏–µ 2 —á–∞—Å–æ–≤)\n\n"
        "–í—Å–µ –∑–∞–∫–∞–∑—ã –æ—Ñ–æ—Ä–º–ª—è—é—Ç—Å—è –∞–Ω–æ–Ω–∏–º–Ω–æ!"
    )
    await update.message.reply_text(info, parse_mode="Markdown")


async def contacts(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    contact_info = (
        "üìû *–ö–æ–Ω—Ç–∞–∫—Ç—ã –º–∞–≥–∞–∑–∏–Ω–∞ CloudFM*\n\n"
        "‚Ä¢ –¢–µ–ª–µ–≥—Ä–∞–º: @CloudFMMSC\n"
        "–ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã: 24/7\n\n"
        "–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –æ–ø—Ç–æ–≤—ã—Ö –∑–∞–∫—É–ø–æ–∫: @CloudFMMSC"
    )
    await update.message.reply_text(contact_info, parse_mode="Markdown")


async def send_order(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    cart = USER_CARTS.get(user.id, [])

    if not cart:
        await update.message.reply_text(
            "‚ùå –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞! –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –ø–µ—Ä–µ–¥ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º –∑–∞–∫–∞–∑–∞.",
            reply_markup=main_menu_keyboard()
        )
        return

    order_text = f"üõí *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!*\n\n"
    order_text += f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: [{user.first_name}](tg://user?id={user.id})\n"
    order_text += f"üÜî ID: `{user.id}`\n\n"
    order_text += "üìù *–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:*\n"

    total = 0
    for item in cart:
        item_total = item['price'] * item['quantity']
        order_text += f"- {item['name']} - {item['quantity']} —à—Ç. = {item_total} ‚ÇΩ\n"
        total += item_total

    order_text += f"\nüíµ *–ò—Ç–æ–≥–æ: {total} ‚ÇΩ*"

    success = False
    for admin_id in ADMIN_IDS:
        try:
            await context.bot.send_message(
                chat_id=admin_id,
                text=order_text,
                parse_mode="Markdown"
            )
            success = True
            logger.info(f"Order sent to admin {admin_id} for user {user.id}")
        except Exception as e:
            logger.error(f"Error sending order to admin {admin_id}: {e}")

    if success:
        await update.message.reply_text(
            "‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω! –°–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –æ–ø–µ—Ä–∞—Ç–æ—Ä –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.",
            reply_markup=main_menu_keyboard()
        )
        USER_CARTS[user.id] = []
    else:
        await update.message.reply_text(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ —á–µ—Ä–µ–∑ –º–µ–Ω—é –ö–æ–Ω—Ç–∞–∫—Ç—ã."
        )


async def edit_order(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    cart = USER_CARTS.get(user.id, [])
    USER_STATES[user.id] = "editing_cart"

    if not cart:
        await update.message.reply_text(
            "‚ùå –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!",
            reply_markup=main_menu_keyboard()
        )
        return

    cart_text = "‚úèÔ∏è *–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã*\n\n"
    cart_text += "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n\n"

    total = 0
    for i, item in enumerate(cart, 1):
        item_total = item['price'] * item['quantity']
        cart_text += f"{i}. {item['name']} - {item['quantity']} —à—Ç. = {item_total} ‚ÇΩ\n"
        total += item_total

    cart_text += f"\nüíµ –ò—Ç–æ–≥–æ: *{total} ‚ÇΩ*"

    await update.message.reply_text(
        cart_text,
        reply_markup=cart_keyboard(),
        parse_mode="Markdown"
    )


async def stop(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    if user.id in ADMIN_IDS:
        await update.message.reply_text("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω...")
        logger.warning(f"Bot stopped by admin {user.id}")
        await context.application.stop()
    else:
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        logger.warning(f"Unauthorized stop attempt by {user.id}")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ –≤–∫—É—Å–∞
async def handle_flavor_selection(update: Update, context: ContextTypes.DEFAULT_TYPE, product_id: str, product_name: str, price: int):
    user = update.effective_user
    user_id = user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–∫—É—Å—ã —É —ç—Ç–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
    if product_name in DISPOSABLE_FLAVORS:
        flavors = DISPOSABLE_FLAVORS[product_name]
        USER_CURRENT_PRODUCT[user_id] = product_id
        USER_CURRENT_FLAVORS[user_id] = flavors
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –≤–∫—É—Å–æ–≤
        message_text = f"–í—ã–±–µ—Ä–∏—Ç–µ –≤–∫—É—Å –¥–ª—è {product_name}:\n\n"
        for i, flavor in enumerate(flavors, 1):
            message_text += f"{i}. {flavor}\n"
        
        message_text += "\n–í–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–∫—É—Å–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ–¥—É–∫—Ç—É' —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è"
        
        USER_STATES[user_id] = f"waiting_flavor_{product_id}"
        await update.message.reply_text(
            message_text,
            reply_markup=flavor_selection_keyboard()
        )
        
    elif product_name in LIQUID_FLAVORS:
        flavors = LIQUID_FLAVORS[product_name]
        USER_CURRENT_PRODUCT[user_id] = product_id
        USER_CURRENT_FLAVORS[user_id] = flavors
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –≤–∫—É—Å–æ–≤
        message_text = f"–í—ã–±–µ—Ä–∏—Ç–µ –≤–∫—É—Å –¥–ª—è {product_name}:\n\n"
        for i, flavor in enumerate(flavors, 1):
            message_text += f"{i}. {flavor}\n"
        
        message_text += "\n–í–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–∫—É—Å–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ–¥—É–∫—Ç—É' —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è"
        
        USER_STATES[user_id] = f"waiting_flavor_{product_id}"
        await update.message.reply_text(
            message_text,
            reply_markup=flavor_selection_keyboard()
        )
        
    else:
        # –ï—Å–ª–∏ —É –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –≤–∫—É—Å–∞, –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ä–∞–∑—É –≤ –∫–æ—Ä–∑–∏–Ω—É
        if user_id not in USER_CARTS:
            USER_CARTS[user_id] = []

        found = False
        for item in USER_CARTS[user_id]:
            if item['name'] == product_name:
                item['quantity'] += 1
                found = True
                break

        if not found:
            USER_CARTS[user_id].append({
                'name': product_name,
                'price': price,
                'quantity': 1
            })

        await update.message.reply_text(
            f"‚úÖ {product_name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!",
            parse_mode="Markdown"
        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫
async def handle_callback_query(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    user = update.effective_user
    user_id = user.id

    await query.answer()

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É
    if query.data.startswith("add_"):
        product_id = query.data[4:]

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–æ–≤–∞—Ä –ø–æ ID
        products = {
            "husky_malaysian": {"name": "HUSKY IMPORT MALAYSIAN SALT (20MG) 30 ml", "price": 400},
            "podonki_arcade": {"name": "PODONKI ARCADE Salt 2% 30 ml", "price": 400},
            "catswill": {"name": "CATSWILL Salt 2% 30 ml", "price": 450},
            "maxwells": {"name": "MAXWELLS Salt 2% 30 ml", "price": 400},
            "rell_green": {"name": "Rell Green Salt 2% 30 ml", "price": 450},
            "rell_ultima": {"name": "Rell Ultima Salt 2% 30 ml", "price": 600},
            # –ù–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è –æ–¥–Ω–æ—Ä–∞–∑–æ–∫
            "hqd_neo_x": {"name": "HQD NEO X 25000 —Ç—è–≥", "price": 1600},
            "hqd_glaze": {"name": "HQD Glaze 12000 —Ç—è–≥", "price": 1350},
            "elfbar_nic_king": {"name": "ELF BAR NIC KING 30000 —Ç—è–≥", "price": 1450},
            "lost_mary_os": {"name": "Lost Mary OS 25000 —Ç—è–≥", "price": 1400},
            "plonq_ultra": {"name": "Plonq Ultra 12000 —Ç—è–≥", "price": 1850},
            "plonq_roqy_l": {"name": "Plonq Roqy L 20000 —Ç—è–≥", "price": 1700},
            "waka_blast": {"name": "WAKA Blast 38000 —Ç—è–≥", "price": 1600},
            "puffmi_tank": {"name": "PUFFMI TANK 20000 —Ç—è–≥", "price": 1650},
            "instabar_wt": {"name": "Instabar WT 15000 —Ç—è–≥", "price": 800},
            # –ù–æ–≤—ã–µ –∫–∞—Ä—Ç—Ä–∏–¥–∂–∏
            "plonq_cartridge": {"name": "–ö–∞—Ä—Ç—Ä–∏–¥–∂ PLONQ 3ml 0.4 –û–º", "price": 400},
            "vaporesso_cartridge": {"name": "–ö–∞—Ä—Ç—Ä–∏–¥–∂ Vaporesso XROS 3ML 0.4 –û–º", "price": 250}
        }

        if product_id in products:
            product = products[product_id]
            product_name = product["name"]
            price = product["price"]
            
            # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ –≤–∫—É—Å–∞
            await handle_flavor_selection(update, context, product_id, product_name, price)
        else:
            await query.edit_message_caption(
                caption="‚ùå –û—à–∏–±–∫–∞: –ø—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
                parse_mode="Markdown"
            )

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É
    elif query.data == "go_to_cart":
        await show_cart_from_query(update, context)


async def show_cart_from_query(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    user = update.effective_user
    user_id = user.id

    cart = USER_CARTS.get(user_id, [])
    USER_STATES[user_id] = "cart"

    cart_text = "üõçÔ∏è *–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞*\n\n"
    if not cart:
        cart_text += "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞"
    else:
        total = 0
        for i, item in enumerate(cart, 1):
            cart_text += f"{i}. {item['name']} - {item['quantity']} —à—Ç. ({item['price']} ‚ÇΩ)\n"
            total += item['price'] * item['quantity']
        cart_text += f"\n–ò—Ç–æ–≥–æ: *{total} ‚ÇΩ*\n"

    await query.edit_message_caption(
        caption=cart_text,
        parse_mode="Markdown"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –∫–æ—Ä–∑–∏–Ω—ã
    await context.bot.send_message(
        chat_id=user_id,
        text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=cart_keyboard()
    )


# ---- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π ----

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    text = update.message.text
    user = update.effective_user
    user_id = user.id

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–∫—É—Å–∞
    current_state = USER_STATES.get(user_id, "")
    if current_state.startswith("waiting_flavor_"):
        if text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ–¥—É–∫—Ç—É":
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é (–∫ –ø—Ä–æ–¥—É–∫—Ç—É)
            product_id = USER_CURRENT_PRODUCT[user_id]
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫ –∫–∞–∫–æ–º—É –º–µ–Ω—é –≤–µ—Ä–Ω—É—Ç—å—Å—è
            if "husky" in product_id:
                USER_STATES[user_id] = "husky_products"
                await show_husky_products(update, context)
            elif "podonki" in product_id:
                USER_STATES[user_id] = "podonki_products"
                await show_podonki_products(update, context)
            elif "catswill" in product_id:
                USER_STATES[user_id] = "catswill_products"
                await show_catswill_products(update, context)
            elif "maxwells" in product_id:
                USER_STATES[user_id] = "maxwells_products"
                await show_maxwells_products(update, context)
            elif "rell_green" in product_id or "rell_ultima" in product_id:
                USER_STATES[user_id] = "rell_products"
                await show_rell_products(update, context)
            elif "hqd" in product_id:
                USER_STATES[user_id] = "hqd_products"
                await show_hqd_products(update, context)
            elif "elfbar" in product_id:
                USER_STATES[user_id] = "elfbar_products"
                await show_elfbar_products(update, context)
            elif "lost_mary" in product_id:
                USER_STATES[user_id] = "lostmary_products"
                await show_lostmary_products(update, context)
            elif "plonq" in product_id:
                USER_STATES[user_id] = "plonq_products"
                await show_plonq_products(update, context)
            elif "waka" in product_id:
                USER_STATES[user_id] = "waka_products"
                await show_waka_products(update, context)
            elif "puffmi" in product_id:
                USER_STATES[user_id] = "puffmi_products"
                await show_puffmi_products(update, context)
            elif "instabar" in product_id:
                USER_STATES[user_id] = "instabar_products"
                await show_instabar_products(update, context)
            return
        elif text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            await back_to_main(update, context)
            return
        elif text.isdigit():
            flavor_index = int(text) - 1
            flavors = USER_CURRENT_FLAVORS.get(user_id, [])
            
            if 0 <= flavor_index < len(flavors):
                flavor = flavors[flavor_index]
                product_id = USER_CURRENT_PRODUCT[user_id]
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ
                products = {
                    "husky_malaysian": {"name": "HUSKY IMPORT MALAYSIAN SALT (20MG) 30 ml", "price": 400},
                    "podonki_arcade": {"name": "PODONKI ARCADE Salt 2% 30 ml", "price": 400},
                    "catswill": {"name": "CATSWILL Salt 2% 30 ml", "price": 450},
                    "maxwells": {"name": "MAXWELLS Salt 2% 30 ml", "price": 400},
                    "rell_green": {"name": "Rell Green Salt 2% 30 ml", "price": 450},
                    "rell_ultima": {"name": "Rell Ultima Salt 2% 30 ml", "price": 600},
                    # –ù–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è –æ–¥–Ω–æ—Ä–∞–∑–æ–∫
                    "hqd_neo_x": {"name": "HQD NEO X 25000 —Ç—è–≥", "price": 1600},
                    "hqd_glaze": {"name": "HQD Glaze 12000 —Ç—è–≥", "price": 1350},
                    "elfbar_nic_king": {"name": "ELF BAR NIC KING 30000 —Ç—è–≥", "price": 1450},
                    "lost_mary_os": {"name": "Lost Mary OS 25000 —Ç—è–≥", "price": 1400},
                    "plonq_ultra": {"name": "Plonq Ultra 12000 —Ç—è–≥", "price": 1850},
                    "plonq_roqy_l": {"name": "Plonq Roqy L 20000 —Ç—è–≥", "price": 1700},
                    "waka_blast": {"name": "WAKA Blast 38000 —Ç—è–≥", "price": 1600},
                    "puffmi_tank": {"name": "PUFFMI TANK 20000 —Ç—è–≥", "price": 1650},
                    "instabar_wt": {"name": "Instabar WT 15000 —Ç—è–≥", "price": 800},
                    # –ù–æ–≤—ã–µ –∫–∞—Ä—Ç—Ä–∏–¥–∂–∏
                    "plonq_cartridge": {"name": "–ö–∞—Ä—Ç—Ä–∏–¥–∂ PLONQ 3ml 0.4 –û–º", "price": 400},
                    "vaporesso_cartridge": {"name": "–ö–∞—Ä—Ç—Ä–∏–¥–∂ Vaporesso XROS 3ML 0.4 –û–º", "price": 250}
                }
                
                if product_id in products:
                    product = products[product_id]
                    product_name_with_flavor = f"{product['name']} - {flavor}"
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ—Ä–∑–∏–Ω—É
                    if user_id not in USER_CARTS:
                        USER_CARTS[user_id] = []

                    found = False
                    for item in USER_CARTS[user_id]:
                        if item['name'] == product_name_with_flavor:
                            item['quantity'] += 1
                            found = True
                            break

                    if not found:
                        USER_CARTS[user_id].append({
                            'name': product_name_with_flavor,
                            'price': product['price'],
                            'quantity': 1
                        })

                    await update.message.reply_text(
                        f"‚úÖ {product_name_with_flavor} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!",
                        parse_mode="Markdown"
                    )
                    
                    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                    USER_STATES[user_id] = "main_menu"
                else:
                    await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –ø—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            else:
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –≤–∫—É—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ü–∏—Ñ—Ä—É –∏–∑ —Å–ø–∏—Å–∫–∞.")
        else:
            await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä—É, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –≤–∫—É—Å—É, –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.")
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    if text == "üõí –ö–∞—Ç–∞–ª–æ–≥":
        await show_catalog(update, context)
    elif text == "üõçÔ∏è –ö–æ—Ä–∑–∏–Ω–∞":
        await show_cart(update, context)
    elif text == "üöö –î–æ—Å—Ç–∞–≤–∫–∞":
        await delivery_info(update, context)
    elif text == "‚ùì –ü–æ–º–æ—â—å":
        await help_command(update, context)
    elif text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã":
        await contacts(update, context)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é –∫–∞—Ç–∞–ª–æ–≥–∞
    elif text == "üíß –ñ–∏–¥–∫–æ—Å—Ç–∏":
        await show_liquids(update, context)
    elif text == "üö¨ –û–¥–Ω–æ—Ä–∞–∑–∫–∏":
        await show_disposable(update, context)
    elif text == "üåø –ñ–µ–≤–∞—Ç–µ–ª—å–Ω—ã–π —Ç–∞–±–∞–∫":
        await update.message.reply_text(
            "‚ùå *–¢–æ–≤–∞—Ä –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç*\n\n"
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∂–µ–≤–∞—Ç–µ–ª—å–Ω—ã–π —Ç–∞–±–∞–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –ø—Ä–æ–¥–∞–∂–µ. "
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–∏–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞.",
            parse_mode="Markdown",
            reply_markup=back_to_catalog_keyboard()
        )
    elif text == "üîß –ü–æ–¥-—Å–∏—Å—Ç–µ–º—ã":
        await update.message.reply_text(
            "‚ùå *–¢–æ–≤–∞—Ä –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç*\n\n"
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–¥-—Å–∏—Å—Ç–µ–º—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –ø—Ä–æ–¥–∞–∂–µ. "
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–∏–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞.",
            parse_mode="Markdown",
            reply_markup=back_to_catalog_keyboard()
        )
    elif text == "‚öôÔ∏è –ö–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏–µ –¥–ª—è –ø–æ–¥-—Å–∏—Å—Ç–µ–º":
        await show_pod_accessories(update, context)
    elif text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await back_to_main(update, context)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –±—Ä–µ–Ω–¥–æ–≤ –∂–∏–¥–∫–æ—Å—Ç–µ–π
    elif USER_STATES.get(user_id) == "liquids_brands" and text in ["HUSKY", "PODONKI", "CATSWILL", "MAXWELLS", "Rell"]:
        if text == "HUSKY":
            await show_husky_products(update, context)
        elif text == "PODONKI":
            await show_podonki_products(update, context)
        elif text == "CATSWILL":
            await show_catswill_products(update, context)
        elif text == "MAXWELLS":
            await show_maxwells_products(update, context)
        elif text == "Rell":
            await show_rell_products(update, context)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –±—Ä–µ–Ω–¥–æ–≤ –æ–¥–Ω–æ—Ä–∞–∑–æ–∫
    elif USER_STATES.get(user_id) == "disposable_brands" and text in ["HQD", "ELF BAR", "LOST MARY", "PLONQ", "WAKA", "PUFFMI", "INSTABAR"]:
        if text == "HQD":
            await show_hqd_products(update, context)
        elif text == "ELF BAR":
            await show_elfbar_products(update, context)
        elif text == "LOST MARY":
            await show_lostmary_products(update, context)
        elif text == "PLONQ":
            await show_plonq_products(update, context)
        elif text == "WAKA":
            await show_waka_products(update, context)
        elif text == "PUFFMI":
            await show_puffmi_products(update, context)
        elif text == "INSTABAR":
            await show_instabar_products(update, context)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ HUSKY
    elif USER_STATES.get(user_id) == "husky_products":
        if text == "HUSKY IMPORT MALAYSIAN SALT (20MG) 30 ml":
            product_id = "husky_malaysian"
            product_name = "HUSKY IMPORT MALAYSIAN SALT (20MG) 30 ml"
            price = 400
            photo_url = PRODUCT_PHOTOS.get(product_name)
            
            if photo_url:
                await update.message.reply_photo(
                    photo=photo_url,
                    caption=f"üíß *{product_name}*\n\n–¶–µ–Ω–∞: *{price} ‚ÇΩ*",
                    parse_mode="Markdown",
                    reply_markup=add_to_cart_keyboard(product_id)
                )
            else:
                await update.message.reply_text(
                    f"üíß *{product_name}*\n\n–¶–µ–Ω–∞: *{price} ‚ÇΩ*",
                    parse_mode="Markdown",
                    reply_markup=add_to_cart_keyboard(product_id)
                )
        elif text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∂–∏–¥–∫–æ—Å—Ç—è–º":
            USER_STATES[user_id] = "liquids_brands"
            await show_liquids(update, context)
        elif text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            await back_to_main(update, context)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ PODONKI
    elif USER_STATES.get(user_id) == "podonki_products":
        if text == "PODONKI ARCADE Salt 2% 30 ml":
            product_id = "podonki_arcade"
            product_name = "PODONKI ARCADE Salt 2% 30 ml"
            price = 400
            photo_url = PRODUCT_PHOTOS.get(product_name)
            
            if photo_url:
                await update.message.reply_photo(
                    photo=photo_url,
                    caption=f"üíß *{product_name}*\n\n–¶–µ–Ω–∞: *{price} ‚ÇΩ*",
                    parse_mode="Markdown",
                    reply_markup=add_to_cart_keyboard(product_id)
                )
            else:
                await update.message.reply_text(
                    f"üíß *{product_name}*\n\n–¶–µ–Ω–∞: *{price} ‚ÇΩ*",
                    parse_mode="Markdown",
                    reply_markup=add_to_cart_keyboard(product_id)
                )
        elif text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∂–∏–¥–∫–æ—Å—Ç—è–º":
            USER_STATES[user_id] = "liquids_brands"
            await show_liquids(update, context)
        elif text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            await back_to_main(update, context)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ CATSWILL
    elif USER_STATES.get(user_id) == "catswill_products":
        if text == "CATSWILL Salt 2% 30 ml":
            product_id = "catswill"
            product_name = "CATSWILL Salt 2% 30 ml"
            price = 450
            photo_url = PRODUCT_PHOTOS.get(product_name)
            
            if photo_url:
                await update.message.reply_photo(
                    photo=photo_url,
                    caption=f"üíß *{product_name}*\n\n–¶–µ–Ω–∞: *{price} ‚ÇΩ*",
                    parse_mode="Markdown",
                    reply_markup=add_to_cart_keyboard(product_id)
                )
            else:
                await update.message.reply_text(
                    f"üíß *{product_name}*\n\n–¶–µ–Ω–∞: *{price} ‚ÇΩ*",
                    parse_mode="Markdown",
                    reply_markup=add_to_cart_keyboard(product_id)
                )
        elif text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∂–∏–¥–∫–æ—Å—Ç—è–º":
            USER_STATES[user_id] = "liquids_brands"
            await show_liquids(update, context)
        elif text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            await back_to_main(update, context)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ MAXWELLS
    elif USER_STATES.get(user_id) == "maxwells_products":
        if text == "MAXWELLS Salt 2% 30 ml":
            product_id = "maxwells"
            product_name = "MAXWELLS Salt 2% 30 ml"
            price = 400
            photo_url = PRODUCT_PHOTOS.get(product_name)
            
            if photo_url:
                await update.message.reply_photo(
                    photo=photo_url,
                    caption=f"üíß *{product_name}*\n\n–¶–µ–Ω–∞: *{price} ‚ÇΩ*",
                    parse_mode="Markdown",
                    reply_markup=add_to_cart_keyboard(product_id)
                )
            else:
                await update.message.reply_text(
                    f"üíß *{product_name}*\n\n–¶–µ–Ω–∞: *{price} ‚ÇΩ*",
                    parse_mode="Markdown",
                    reply_markup=add_to_cart_keyboard(product_id)
                )
        elif text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∂–∏–¥–∫–æ—Å—Ç—è–º":
            USER_STATES[user_id] = "liquids_brands"
            await show_liquids(update, context)
        elif text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            await back_to_main(update, context)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ Rell
    elif USER_STATES.get(user_id) == "rell_products":
        if text == "Rell Green Salt 2% 30 ml":
            product_id = "rell_green"
            product_name = "Rell Green Salt 2% 30 ml"
            price = 450
            photo_url = PRODUCT_PHOTOS.get(product_name)
            
            if photo_url:
                await update.message.reply_photo(
                    photo=photo_url,
                    caption=f"üíß *{product_name}*\n\n–¶–µ–Ω–∞: *{price} ‚ÇΩ*",
                    parse_mode="Markdown",
                    reply_markup=add_to_cart_keyboard(product_id)
                )
            else:
                await update.message.reply_text(
                    f"üíß *{product_name}*\n\n–¶–µ–Ω–∞: *{price} ‚ÇΩ*",
                    parse_mode="Markdown",
                    reply_markup=add_to_cart_keyboard(product_id)
                )
        elif text == "Rell Ultima Salt 2% 30 ml":
            product_id = "rell_ultima"
            product_name = "Rell Ultima Salt 2% 30 ml"
            price = 600
            photo_url = PRODUCT_PHOTOS.get(product_name)
            
            if photo_url:
                await update.message.reply_photo(
                    photo=photo_url,
                    caption=f"üíß *{product_name}*\n\n–¶–µ–Ω–∞: *{price} ‚ÇΩ*",
                    parse_mode="Markdown",
                    reply_markup=add_to_cart_keyboard(product_id)
                )
            else:
                await update.message.reply_text(
                    f"üíß *{product_name}*\n\n–¶–µ–Ω–∞: *{price} ‚ÇΩ*",
                    parse_mode="Markdown",
                    reply_markup=add_to_cart_keyboard(product_id)
                )
        elif text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∂–∏–¥–∫–æ—Å—Ç—è–º":
            USER_STATES[user_id] = "liquids_brands"
            await show_liquids(update, context)
        elif text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            await back_to_main(update, context)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ HQD
    elif USER_STATES.get(user_id) == "hqd_products":
        if text == "HQD NEO X 25000 —Ç—è–≥":
            product_id = "hqd_neo_x"
            product_name = "HQD NEO X 25000 —Ç—è–≥"
            price = 1600
            photo_url = PRODUCT_PHOTOS.get(product_name)
            
            if photo_url:
                await update.message.reply_photo(
                    photo=photo_url,
                    caption=f"üö¨ *{product_name}*\n\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—è–≥: 25000\n–¶–µ–Ω–∞: *{price} ‚ÇΩ*",
                    parse_mode="Markdown",
                    reply_markup=add_to_cart_keyboard(product_id)
                )
            else:
                await update.message.reply_text(
                    f"üö¨ *{product_name}*\n\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—è–≥: 25000\n–¶–µ–Ω–∞: *{price} ‚ÇΩ*",
                    parse_mode="Markdown",
                    reply_markup=add_to_cart_keyboard(product_id)
                )
        elif text == "HQD Glaze 12000 —Ç—è–≥":
            product_id = "hqd_glaze"
            product_name = "HQD Glaze 12000 —Ç—è–≥"
            price = 1350
            photo_url = PRODUCT_PHOTOS.get(product_name)
            
            if photo_url:
                await update.message.reply_photo(
                    photo=photo_url,
                    caption=f"üö¨ *{product_name}*\n\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—è–≥: 12000\n–¶–µ–Ω–∞: *{price} ‚ÇΩ*",
                    parse_mode="Markdown",
                    reply_markup=add_to_cart_keyboard(product_id)
                )
            else:
                await update.message.reply_text(
                    f"üö¨ *{product_name}*\n\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—è–≥: 12000\n–¶–µ–Ω–∞: *{price} ‚ÇΩ*",
                    parse_mode="Markdown",
                    reply_markup=add_to_cart_keyboard(product_id)
                )
        elif text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –æ–¥–Ω–æ—Ä–∞–∑–∫–∞–º":
            USER_STATES[user_id] = "disposable_brands"
            await show_disposable(update, context)
        elif text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            await back_to_main(update, context)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ ELF BAR
    elif USER_STATES.get(user_id) == "elfbar_products":
        if text == "ELF BAR NIC KING 30000 —Ç—è–≥":
            product_id = "elfbar_nic_king"
            product_name = "ELF BAR NIC KING 30000 —Ç—è–≥"
            price = 1450
            photo_url = PRODUCT_PHOTOS.get(product_name)
            
            if photo_url:
                await update.message.reply_photo(
                    photo=photo_url,
                    caption=f"üö¨ *{product_name}*\n\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—è–≥: 30000\n–¶–µ–Ω–∞: *{price} ‚ÇΩ*",
                    parse_mode="Markdown",
                    reply_markup=add_to_cart_keyboard(product_id)
                )
            else:
                await update.message.reply_text(
                    f"üö¨ *{product_name}*\n\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—è–≥: 30000\n–¶–µ–Ω–∞: *{price} ‚ÇΩ*",
                    parse_mode="Markdown",
                    reply_markup=add_to_cart_keyboard(product_id)
                )
        elif text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –æ–¥–Ω–æ—Ä–∞–∑–∫–∞–º":
            USER_STATES[user_id] = "disposable_brands"
            await show_disposable(update, context)
        elif text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            await back_to_main(update, context)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ LOST MARY
    elif USER_STATES.get(user_id) == "lostmary_products":
        if text == "Lost Mary OS 25000 —Ç—è–≥":
            product_id = "lost_mary_os"
            product_name = "Lost Mary OS 25000 —Ç—è–≥"
            price = 1400
            photo_url = PRODUCT_PHOTOS.get(product_name)
            
            if photo_url:
                await update.message.reply_photo(
                    photo=photo_url,
                    caption=f"üö¨ *{product_name}*\n\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—è–≥: 25000\n–¶–µ–Ω–∞: *{price} ‚ÇΩ*",
                    parse_mode="Markdown",
                    reply_markup=add_to_cart_keyboard(product_id)
                )
            else:
                await update.message.reply_text(
                    f"üö¨ *{product_name}*\n\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—è–≥: 25000\n–¶–µ–Ω–∞: *{price} ‚ÇΩ*",
                    parse_mode="Markdown",
                    reply_markup=add_to_cart_keyboard(product_id)
                )
        elif text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –æ–¥–Ω–æ—Ä–∞–∑–∫–∞–º":
            USER_STATES[user_id] = "disposable_brands"
            await show_disposable(update, context)
        elif text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            await back_to_main(update, context)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ PLONQ
    elif USER_STATES.get(user_id) == "plonq_products":
        if text == "Plonq Ultra 12000 —Ç—è–≥":
            product_id = "plonq_ultra"
            product_name = "Plonq Ultra 12000 —Ç—è–≥"
            price = 1850
            photo_url = PRODUCT_PHOTOS.get(product_name)
            
            if photo_url:
                await update.message.reply_photo(
                    photo=photo_url,
                    caption=f"üö¨ *{product_name}*\n\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—è–≥: 12000\n–¶–µ–Ω–∞: *{price} ‚ÇΩ*",
                    parse_mode="Markdown",
                    reply_markup=add_to_cart_keyboard(product_id)
                )
            else:
                await update.message.reply_text(
                    f"üö¨ *{product_name}*\n\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—è–≥: 12000\n–¶–µ–Ω–∞: *{price} ‚ÇΩ*",
                    parse_mode="Markdown",
                    reply_markup=add_to_cart_keyboard(product_id)
                )
        elif text == "Plonq Roqy L 20000 —Ç—è–≥":
            product_id = "plonq_roqy_l"
            product_name = "Plonq Roqy L 20000 —Ç—è–≥"
            price = 1700
            photo_url = PRODUCT_PHOTOS.get(product_name)
            
            if photo_url:
                await update.message.reply_photo(
                    photo=photo_url,
                    caption=f"üö¨ *{product_name}*\n\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—è–≥: 20000\n–¶–µ–Ω–∞: *{price} ‚ÇΩ*",
                    parse_mode="Markdown",
                    reply_markup=add_to_cart_keyboard(product_id)
                )
            else:
                await update.message.reply_text(
                    f"üö¨ *{product_name}*\n\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—è–≥: 20000\n–¶–µ–Ω–∞: *{price} ‚ÇΩ*",
                    parse_mode="Markdown",
                    reply_markup=add_to_cart_keyboard(product_id)
                )
        elif text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –æ–¥–Ω–æ—Ä–∞–∑–∫–∞–º":
            USER_STATES[user_id] = "disposable_brands"
            await show_disposable(update, context)
        elif text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            await back_to_main(update, context)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ WAKA
    elif USER_STATES.get(user_id) == "waka_products":
        if text == "WAKA Blast 38000 —Ç—è–≥":
            product_id = "waka_blast"
            product_name = "WAKA Blast 38000 —Ç—è–≥"
            price = 1600
            photo_url = PRODUCT_PHOTOS.get(product_name)
            
            if photo_url:
                await update.message.reply_photo(
                    photo=photo_url,
                    caption=f"üö¨ *{product_name}*\n\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—è–≥: 38000\n–¶–µ–Ω–∞: *{price} ‚ÇΩ*",
                    parse_mode="Markdown",
                    reply_markup=add_to_cart_keyboard(product_id)
                )
            else:
                await update.message.reply_text(
                    f"üö¨ *{product_name}*\n\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—è–≥: 38000\n–¶–µ–Ω–∞: *{price} ‚ÇΩ*",
                    parse_mode="Markdown",
                    reply_markup=add_to_cart_keyboard(product_id)
                )
        elif text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –æ–¥–Ω–æ—Ä–∞–∑–∫–∞–º":
            USER_STATES[user_id] = "disposable_brands"
            await show_disposable(update, context)
        elif text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            await back_to_main(update, context)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ PUFFMI
    elif USER_STATES.get(user_id) == "puffmi_products":
        if text == "PUFFMI TANK 20000 —Ç—è–≥":
            product_id = "puffmi_tank"
            product_name = "PUFFMI TANK 20000 —Ç—è–≥"
            price = 1650
            photo_url = PRODUCT_PHOTOS.get(product_name)
            
            if photo_url:
                await update.message.reply_photo(
                    photo=photo_url,
                    caption=f"üö¨ *{product_name}*\n\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—è–≥: 20000\n–¶–µ–Ω–∞: *{price} ‚ÇΩ*",
                    parse_mode="Markdown",
                    reply_markup=add_to_cart_keyboard(product_id)
                )
            else:
                await update.message.reply_text(
                    f"üö¨ *{product_name}*\n\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—è–≥: 20000\n–¶–µ–Ω–∞: *{price} ‚ÇΩ*",
                    parse_mode="Markdown",
                    reply_markup=add_to_cart_keyboard(product_id)
                )
        elif text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –æ–¥–Ω–æ—Ä–∞–∑–∫–∞–º":
            USER_STATES[user_id] = "disposable_brands"
            await show_disposable(update, context)
        elif text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            await back_to_main(update, context)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ INSTABAR
    elif USER_STATES.get(user_id) == "instabar_products":
        if text == "Instabar WT 15000 —Ç—è–≥":
            product_id = "instabar_wt"
            product_name = "Instabar WT 15000 —Ç—è–≥"
            price = 800
            photo_url = PRODUCT_PHOTOS.get(product_name)
            
            if photo_url:
                await update.message.reply_photo(
                    photo=photo_url,
                    caption=f"üö¨ *{product_name}*\n\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—è–≥: 15000\n–¶–µ–Ω–∞: *{price} ‚ÇΩ*",
                    parse_mode="Markdown",
                    reply_markup=add_to_cart_keyboard(product_id)
                )
            else:
                await update.message.reply_text(
                    f"üö¨ *{product_name}*\n\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—è–≥: 15000\n–¶–µ–Ω–∞: *{price} ‚ÇΩ*",
                    parse_mode="Markdown",
                    reply_markup=add_to_cart_keyboard(product_id)
                )
        elif text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –æ–¥–Ω–æ—Ä–∞–∑–∫–∞–º":
            USER_STATES[user_id] = "disposable_brands"
            await show_disposable(update, context)
        elif text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            await back_to_main(update, context)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏—Ö
    elif USER_STATES.get(user_id) == "pod_accessories":
        if text == "–ò—Å–ø–∞—Ä–∏—Ç–µ–ª–∏":
            await update.message.reply_text(
                "‚ùå *–¢–æ–≤–∞—Ä –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç*\n\n"
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∏—Å–ø–∞—Ä–∏—Ç–µ–ª–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –ø—Ä–æ–¥–∞–∂–µ. "
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–∏–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞.",
                parse_mode="Markdown",
                reply_markup=back_to_catalog_keyboard()
            )
        elif text == "–ö–∞—Ä—Ç—Ä–∏–¥–∂—ã":
            await show_cartridges(update, context)
        elif text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∫–∞—Ç–∞–ª–æ–≥":
            await back_to_catalog(update, context)
        elif text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            await back_to_main(update, context)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ä—Ç—Ä–∏–¥–∂–µ–π
    elif USER_STATES.get(user_id) == "cartridges":
        if text == "PLONQ 3ml 0.4 –û–º":
            product_id = "plonq_cartridge"
            product_name = "–ö–∞—Ä—Ç—Ä–∏–¥–∂ PLONQ 3ml 0.4 –û–º"
            price = 400
            photo_url = PRODUCT_PHOTOS.get(product_name)
            
            if photo_url:
                await update.message.reply_photo(
                    photo=photo_url,
                    caption=f"üîß *{product_name}*\n\n–û–±—ä–µ–º: 3ml\n–°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ: 0.4 –û–º\n–¶–µ–Ω–∞: *{price} ‚ÇΩ*",
                    parse_mode="Markdown",
                    reply_markup=add_to_cart_keyboard(product_id)
                )
            else:
                await update.message.reply_text(
                    f"üîß *{product_name}*\n\n–û–±—ä–µ–º: 3ml\n–°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ: 0.4 –û–º\n–¶–µ–Ω–∞: *{price} ‚ÇΩ*",
                    parse_mode="Markdown",
                    reply_markup=add_to_cart_keyboard(product_id)
                )
        elif text == "Vaporesso XROS 3ML 0.4 –û–º":
            product_id = "vaporesso_cartridge"
            product_name = "–ö–∞—Ä—Ç—Ä–∏–¥–∂ Vaporesso XROS 3ML 0.4 –û–º"
            price = 250
            photo_url = PRODUCT_PHOTOS.get(product_name)
            
            if photo_url:
                await update.message.reply_photo(
                    photo=photo_url,
                    caption=f"üîß *{product_name}*\n\n–û–±—ä–µ–º: 3ml\n–°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ: 0.4 –û–º\n–¶–µ–Ω–∞: *{price} ‚ÇΩ*",
                    parse_mode="Markdown",
                    reply_markup=add_to_cart_keyboard(product_id)
                )
            else:
                await update.message.reply_text(
                    f"üîß *{product_name}*\n\n–û–±—ä–µ–º: 3ml\n–°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ: 0.4 –û–º\n–¶–µ–Ω–∞: *{price} ‚ÇΩ*",
                    parse_mode="Markdown",
                    reply_markup=add_to_cart_keyboard(product_id)
                )
        elif text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏–º":
            USER_STATES[user_id] = "pod_accessories"
            await show_pod_accessories(update, context)
        elif text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            await back_to_main(update, context)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    elif text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∫–∞—Ç–∞–ª–æ–≥":
        await back_to_catalog(update, context)
    elif text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∂–∏–¥–∫–æ—Å—Ç—è–º":
        await back_to_liquids(update, context)
    elif text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –æ–¥–Ω–æ—Ä–∞–∑–∫–∞–º":
        await back_to_disposable(update, context)
    elif text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏–º":
        await back_to_accessories(update, context)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã
    elif text == "‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑":
        await send_order(update, context)
    elif text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–∫–∞–∑":
        await edit_order(update, context)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã
    elif text.isdigit() and USER_STATES.get(user_id) == "editing_cart":
        item_num = int(text)
        cart = USER_CARTS.get(user_id, [])
        if 1 <= item_num <= len(cart):
            removed = cart.pop(item_num - 1)
            await update.message.reply_text(
                f"‚ùå –¢–æ–≤–∞—Ä '{removed['name']}' —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã",
                reply_markup=cart_keyboard()
            )
            USER_STATES[user_id] = "cart"
            await show_cart(update, context)
        else:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞",
                reply_markup=cart_keyboard()
            )
        return

    else:
        await update.message.reply_text(
            "–Ø –Ω–µ –ø–æ–Ω—è–ª –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /start"
        )


# ---- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ----

def main() -> None:
    try:
        application = Application.builder().token(TOKEN).build()
        logger.info("–ú–∞–≥–∞–∑–∏–Ω CloudFM —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
        return

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("stop", stop))

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(handle_callback_query))

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("–ë–æ—Ç-–º–∞–≥–∞–∑–∏–Ω CloudFM –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    application.run_polling()


if __name__ == '__main__':
    main()

